{"elements":[],"behaviors":[{"type":"behavior","desc":"\nUse `Polymer.IronValidatableBehavior` to implement an element that validates user input.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute.\n\n","events":[],"jsdoc":{"description":"\nUse `Polymer.IronValidatableBehavior` to implement an element that validates user input.\n\n### Accessibility\n\nChanging the `invalid` property, either manually or by calling `validate()` will update the\n`aria-invalid` attribute.\n\n","tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"polymerBehavior","type":null,"name":null,"description":null}],"orig":"*\n   * Use `Polymer.IronValidatableBehavior` to implement an element that validates user input.\n   *\n   * ### Accessibility\n   *\n   * Changing the `invalid` property, either manually or by calling `validate()` will update the\n   * `aria-invalid` attribute.\n   *\n   * @demo demo/index.html\n   * @polymerBehavior\n   "},"demos":[{"desc":"demo","path":"demo/index.html"}],"symbol":"Polymer.IronValidatableBehavior","is":"Polymer.IronValidatableBehavior","properties":[{"name":"hasValidator","type":"Function","desc":"\n","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"hasValidator","range":[1450,1462],"loc":{"start":{"line":72,"column":4},"end":{"line":72,"column":16}}},"value":{"type":"FunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"BinaryExpression","operator":"!=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1490,1494],"loc":{"start":{"line":73,"column":13},"end":{"line":73,"column":17}}},"property":{"type":"Identifier","name":"_validator","range":[1495,1505],"loc":{"start":{"line":73,"column":18},"end":{"line":73,"column":28}}},"range":[1490,1505],"loc":{"start":{"line":73,"column":13},"end":{"line":73,"column":28}}},"right":{"type":"Literal","value":null,"raw":"null","range":[1509,1513],"loc":{"start":{"line":73,"column":32},"end":{"line":73,"column":36}}},"range":[1490,1513],"loc":{"start":{"line":73,"column":13},"end":{"line":73,"column":36}}},"range":[1483,1514],"loc":{"start":{"line":73,"column":6},"end":{"line":73,"column":37}}}],"range":[1475,1520],"loc":{"start":{"line":72,"column":29},"end":{"line":74,"column":5}}},"generator":false,"expression":false,"range":[1464,1520],"loc":{"start":{"line":72,"column":18},"end":{"line":74,"column":5}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[1450,1520],"loc":{"start":{"line":72,"column":4},"end":{"line":74,"column":5}},"leadingComments":[{"type":"Block","value":"*\n     * @return {boolean} True if the validator `validator` exists.\n     ","range":[1367,1445],"loc":{"start":{"line":69,"column":4},"end":{"line":71,"column":7}}}]},"params":[],"jsdoc":{"description":"\n","tags":[{"tag":"return","type":"boolean","description":"True if the validator `validator` exists."}],"orig":"*\n     * @return {boolean} True if the validator `validator` exists.\n     "},"function":true,"return":{"type":"boolean","desc":"True if the validator `validator` exists."}},{"name":"invalid","type":"Boolean","desc":"\nTrue if the last call to `validate` is invalid.\n       ","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"invalid","range":[714,721],"loc":{"start":{"line":36,"column":6},"end":{"line":36,"column":13}}},"value":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"notify","range":[733,739],"loc":{"start":{"line":37,"column":8},"end":{"line":37,"column":14}}},"value":{"type":"Literal","value":true,"raw":"true","range":[741,745],"loc":{"start":{"line":37,"column":16},"end":{"line":37,"column":20}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[733,745],"loc":{"start":{"line":37,"column":8},"end":{"line":37,"column":20}}},{"type":"Property","key":{"type":"Identifier","name":"reflectToAttribute","range":[755,773],"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":26}}},"value":{"type":"Literal","value":true,"raw":"true","range":[775,779],"loc":{"start":{"line":38,"column":28},"end":{"line":38,"column":32}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[755,779],"loc":{"start":{"line":38,"column":8},"end":{"line":38,"column":32}}},{"type":"Property","key":{"type":"Identifier","name":"type","range":[789,793],"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":12}}},"value":{"type":"Identifier","name":"Boolean","range":[795,802],"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":21}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[789,802],"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":21}}},{"type":"Property","key":{"type":"Identifier","name":"value","range":[812,817],"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":13}}},"value":{"type":"Literal","value":false,"raw":"false","range":[819,824],"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":20}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[812,824],"loc":{"start":{"line":40,"column":8},"end":{"line":40,"column":20}}}],"range":[723,832],"loc":{"start":{"line":36,"column":15},"end":{"line":41,"column":7}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[714,832],"loc":{"start":{"line":36,"column":6},"end":{"line":41,"column":7}},"leadingComments":[{"type":"Block","value":"*\n       * True if the last call to `validate` is invalid.\n       ","range":[637,707],"loc":{"start":{"line":33,"column":6},"end":{"line":35,"column":9}}}]},"published":true,"notify":true,"reflectToAttribute":"UNKNOWN","default":false,"jsdoc":{"description":"\nTrue if the last call to `validate` is invalid.\n       ","tags":[],"orig":"*\n       * True if the last call to `validate` is invalid.\n       "}},{"name":"observers","type":"Array","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"observers","range":[901,910],"loc":{"start":{"line":49,"column":4},"end":{"line":49,"column":13}}},"value":{"type":"ArrayExpression","elements":[{"type":"Literal","value":"_invalidChanged(invalid)","raw":"'_invalidChanged(invalid)'","range":[920,946],"loc":{"start":{"line":50,"column":6},"end":{"line":50,"column":32}}}],"range":[912,952],"loc":{"start":{"line":49,"column":15},"end":{"line":51,"column":5}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[901,952],"loc":{"start":{"line":49,"column":4},"end":{"line":51,"column":5}}}},{"name":"validate","type":"Function","desc":"\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"validate","range":[1957,1965],"loc":{"start":{"line":85,"column":4},"end":{"line":85,"column":12}}},"value":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"value","range":[1976,1981],"loc":{"start":{"line":85,"column":23},"end":{"line":85,"column":28}}}],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1991,1995],"loc":{"start":{"line":86,"column":6},"end":{"line":86,"column":10}}},"property":{"type":"Identifier","name":"invalid","range":[1996,2003],"loc":{"start":{"line":86,"column":11},"end":{"line":86,"column":18}}},"range":[1991,2003],"loc":{"start":{"line":86,"column":6},"end":{"line":86,"column":18}}},"right":{"type":"UnaryExpression","operator":"!","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[2007,2011],"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":26}}},"property":{"type":"Identifier","name":"_getValidity","range":[2012,2024],"loc":{"start":{"line":86,"column":27},"end":{"line":86,"column":39}}},"range":[2007,2024],"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":39}}},"arguments":[{"type":"Identifier","name":"value","range":[2025,2030],"loc":{"start":{"line":86,"column":40},"end":{"line":86,"column":45}}}],"range":[2007,2031],"loc":{"start":{"line":86,"column":22},"end":{"line":86,"column":46}}},"prefix":true,"range":[2006,2031],"loc":{"start":{"line":86,"column":21},"end":{"line":86,"column":46}}},"range":[1991,2031],"loc":{"start":{"line":86,"column":6},"end":{"line":86,"column":46}}},"range":[1991,2032],"loc":{"start":{"line":86,"column":6},"end":{"line":86,"column":47}}},{"type":"ReturnStatement","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[2047,2051],"loc":{"start":{"line":87,"column":14},"end":{"line":87,"column":18}}},"property":{"type":"Identifier","name":"invalid","range":[2052,2059],"loc":{"start":{"line":87,"column":19},"end":{"line":87,"column":26}}},"range":[2047,2059],"loc":{"start":{"line":87,"column":14},"end":{"line":87,"column":26}}},"prefix":true,"range":[2046,2059],"loc":{"start":{"line":87,"column":13},"end":{"line":87,"column":26}}},"range":[2039,2060],"loc":{"start":{"line":87,"column":6},"end":{"line":87,"column":27}}}],"range":[1983,2066],"loc":{"start":{"line":85,"column":30},"end":{"line":88,"column":5}}},"generator":false,"expression":false,"range":[1967,2066],"loc":{"start":{"line":85,"column":14},"end":{"line":88,"column":5}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[1957,2066],"loc":{"start":{"line":85,"column":4},"end":{"line":88,"column":5}},"leadingComments":[{"type":"Block","value":"*\n     * Returns true if the `value` is valid, and updates `invalid`. If you want\n     * your element to have custom validation logic, do not override this method;\n     * override `_getValidity(value)` instead.\n\n     * @param {Object} value The value to be validated. By default, it is passed\n     * to the validator's `validate()` function, if a validator is set.\n     * @return {boolean} True if `value` is valid.\n     ","range":[1527,1952],"loc":{"start":{"line":76,"column":4},"end":{"line":84,"column":7}}}]},"params":[{"name":"value","type":"Object","desc":"The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."}],"jsdoc":{"description":"\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n","tags":[{"tag":"param","type":"Object","name":"value","description":"The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."},{"tag":"return","type":"boolean","description":"True if `value` is valid."}],"orig":"*\n     * Returns true if the `value` is valid, and updates `invalid`. If you want\n     * your element to have custom validation logic, do not override this method;\n     * override `_getValidity(value)` instead.\n\n     * @param {Object} value The value to be validated. By default, it is passed\n     * to the validator's `validate()` function, if a validator is set.\n     * @return {boolean} True if `value` is valid.\n     "},"function":true,"return":{"type":"boolean","desc":"True if `value` is valid."}},{"name":"validator","type":"String","desc":"\nName of the validator to use.\n       ","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"validator","range":[587,596],"loc":{"start":{"line":29,"column":6},"end":{"line":29,"column":15}}},"value":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"type","range":[608,612],"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":12}}},"value":{"type":"Identifier","name":"String","range":[614,620],"loc":{"start":{"line":30,"column":14},"end":{"line":30,"column":20}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[608,620],"loc":{"start":{"line":30,"column":8},"end":{"line":30,"column":20}}}],"range":[598,628],"loc":{"start":{"line":29,"column":17},"end":{"line":31,"column":7}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[587,628],"loc":{"start":{"line":29,"column":6},"end":{"line":31,"column":7}},"leadingComments":[{"type":"Block","value":"*\n       * Name of the validator to use.\n       ","range":[528,580],"loc":{"start":{"line":26,"column":6},"end":{"line":28,"column":9}}}]},"published":true,"jsdoc":{"description":"\nName of the validator to use.\n       ","tags":[],"orig":"*\n       * Name of the validator to use.\n       "}},{"name":"validatorType","type":"String","desc":"\nNamespace for this validator.\n       ","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"validatorType","range":[446,459],"loc":{"start":{"line":21,"column":6},"end":{"line":21,"column":19}}},"value":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"type","range":[471,475],"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":12}}},"value":{"type":"Identifier","name":"String","range":[477,483],"loc":{"start":{"line":22,"column":14},"end":{"line":22,"column":20}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[471,483],"loc":{"start":{"line":22,"column":8},"end":{"line":22,"column":20}}},{"type":"Property","key":{"type":"Identifier","name":"value","range":[493,498],"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":13}}},"value":{"type":"Literal","value":"validator","raw":"'validator'","range":[500,511],"loc":{"start":{"line":23,"column":15},"end":{"line":23,"column":26}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[493,511],"loc":{"start":{"line":23,"column":8},"end":{"line":23,"column":26}}}],"range":[461,519],"loc":{"start":{"line":21,"column":21},"end":{"line":24,"column":7}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[446,519],"loc":{"start":{"line":21,"column":6},"end":{"line":24,"column":7}},"leadingComments":[{"type":"Block","value":"*\n       * Namespace for this validator.\n       ","range":[387,439],"loc":{"start":{"line":18,"column":6},"end":{"line":20,"column":9}}}]},"published":true,"default":"validator","jsdoc":{"description":"\nNamespace for this validator.\n       ","tags":[],"orig":"*\n       * Namespace for this validator.\n       "}},{"name":"_getValidity","type":"Function","desc":"\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.\n\n","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"_getValidity","range":[2454,2466],"loc":{"start":{"line":100,"column":4},"end":{"line":100,"column":16}}},"value":{"type":"FunctionExpression","id":null,"params":[{"type":"Identifier","name":"value","range":[2477,2482],"loc":{"start":{"line":100,"column":27},"end":{"line":100,"column":32}}}],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[2496,2500],"loc":{"start":{"line":101,"column":10},"end":{"line":101,"column":14}}},"property":{"type":"Identifier","name":"hasValidator","range":[2501,2513],"loc":{"start":{"line":101,"column":15},"end":{"line":101,"column":27}}},"range":[2496,2513],"loc":{"start":{"line":101,"column":10},"end":{"line":101,"column":27}}},"arguments":[],"range":[2496,2515],"loc":{"start":{"line":101,"column":10},"end":{"line":101,"column":29}}},"consequent":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[2534,2538],"loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":19}}},"property":{"type":"Identifier","name":"_validator","range":[2539,2549],"loc":{"start":{"line":102,"column":20},"end":{"line":102,"column":30}}},"range":[2534,2549],"loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":30}}},"property":{"type":"Identifier","name":"validate","range":[2550,2558],"loc":{"start":{"line":102,"column":31},"end":{"line":102,"column":39}}},"range":[2534,2558],"loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":39}}},"arguments":[{"type":"Identifier","name":"value","range":[2559,2564],"loc":{"start":{"line":102,"column":40},"end":{"line":102,"column":45}}}],"range":[2534,2565],"loc":{"start":{"line":102,"column":15},"end":{"line":102,"column":46}}},"range":[2527,2566],"loc":{"start":{"line":102,"column":8},"end":{"line":102,"column":47}}}],"range":[2517,2574],"loc":{"start":{"line":101,"column":31},"end":{"line":103,"column":7}}},"alternate":null,"range":[2492,2574],"loc":{"start":{"line":101,"column":6},"end":{"line":103,"column":7}}},{"type":"ReturnStatement","argument":{"type":"Literal","value":true,"raw":"true","range":[2588,2592],"loc":{"start":{"line":104,"column":13},"end":{"line":104,"column":17}}},"range":[2581,2593],"loc":{"start":{"line":104,"column":6},"end":{"line":104,"column":18}}}],"range":[2484,2599],"loc":{"start":{"line":100,"column":34},"end":{"line":105,"column":5}}},"generator":false,"expression":false,"range":[2468,2599],"loc":{"start":{"line":100,"column":18},"end":{"line":105,"column":5}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[2454,2599],"loc":{"start":{"line":100,"column":4},"end":{"line":105,"column":5}},"leadingComments":[{"type":"Block","value":"*\n     * Returns true if `value` is valid.  By default, it is passed\n     * to the validator's `validate()` function, if a validator is set. You\n     * should override this method if you want to implement custom validity\n     * logic for your element.\n     *\n     * @param {Object} value The value to be validated.\n     * @return {boolean} True if `value` is valid.\n     ","range":[2073,2448],"loc":{"start":{"line":90,"column":4},"end":{"line":98,"column":7}}}]},"params":[{"name":"value","type":"Object","desc":"The value to be validated."}],"jsdoc":{"description":"\nReturns true if `value` is valid.  By default, it is passed\nto the validator's `validate()` function, if a validator is set. You\nshould override this method if you want to implement custom validity\nlogic for your element.\n\n","tags":[{"tag":"param","type":"Object","name":"value","description":"The value to be validated."},{"tag":"return","type":"boolean","description":"True if `value` is valid."}],"orig":"*\n     * Returns true if `value` is valid.  By default, it is passed\n     * to the validator's `validate()` function, if a validator is set. You\n     * should override this method if you want to implement custom validity\n     * logic for your element.\n     *\n     * @param {Object} value The value to be validated.\n     * @return {boolean} True if `value` is valid.\n     "},"private":true,"function":true,"return":{"type":"boolean","desc":"True if `value` is valid."}},{"name":"_invalidChanged","type":"Function","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"_invalidChanged","range":[1179,1194],"loc":{"start":{"line":61,"column":4},"end":{"line":61,"column":19}}},"value":{"type":"FunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"IfStatement","test":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1219,1223],"loc":{"start":{"line":62,"column":10},"end":{"line":62,"column":14}}},"property":{"type":"Identifier","name":"invalid","range":[1224,1231],"loc":{"start":{"line":62,"column":15},"end":{"line":62,"column":22}}},"range":[1219,1231],"loc":{"start":{"line":62,"column":10},"end":{"line":62,"column":22}}},"consequent":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1243,1247],"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":12}}},"property":{"type":"Identifier","name":"setAttribute","range":[1248,1260],"loc":{"start":{"line":63,"column":13},"end":{"line":63,"column":25}}},"range":[1243,1260],"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":25}}},"arguments":[{"type":"Literal","value":"aria-invalid","raw":"'aria-invalid'","range":[1261,1275],"loc":{"start":{"line":63,"column":26},"end":{"line":63,"column":40}}},{"type":"Literal","value":"true","raw":"'true'","range":[1277,1283],"loc":{"start":{"line":63,"column":42},"end":{"line":63,"column":48}}}],"range":[1243,1284],"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":49}}},"range":[1243,1285],"loc":{"start":{"line":63,"column":8},"end":{"line":63,"column":50}}}],"range":[1233,1293],"loc":{"start":{"line":62,"column":24},"end":{"line":64,"column":7}}},"alternate":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1309,1313],"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":12}}},"property":{"type":"Identifier","name":"removeAttribute","range":[1314,1329],"loc":{"start":{"line":65,"column":13},"end":{"line":65,"column":28}}},"range":[1309,1329],"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":28}}},"arguments":[{"type":"Literal","value":"aria-invalid","raw":"'aria-invalid'","range":[1330,1344],"loc":{"start":{"line":65,"column":29},"end":{"line":65,"column":43}}}],"range":[1309,1345],"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":44}}},"range":[1309,1346],"loc":{"start":{"line":65,"column":8},"end":{"line":65,"column":45}}}],"range":[1299,1354],"loc":{"start":{"line":64,"column":13},"end":{"line":66,"column":7}}},"range":[1215,1354],"loc":{"start":{"line":62,"column":6},"end":{"line":66,"column":7}}}],"range":[1207,1360],"loc":{"start":{"line":61,"column":32},"end":{"line":67,"column":5}}},"generator":false,"expression":false,"range":[1196,1360],"loc":{"start":{"line":61,"column":21},"end":{"line":67,"column":5}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[1179,1360],"loc":{"start":{"line":61,"column":4},"end":{"line":67,"column":5}}},"params":[],"private":true,"function":true},{"name":"_validator","type":"Function","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"_validator","range":[963,973],"loc":{"start":{"line":53,"column":8},"end":{"line":53,"column":18}}},"value":{"type":"FunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ReturnStatement","argument":{"type":"LogicalExpression","operator":"&&","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[991,995],"loc":{"start":{"line":54,"column":13},"end":{"line":54,"column":17}}},"property":{"type":"Identifier","name":"_validatorMeta","range":[996,1010],"loc":{"start":{"line":54,"column":18},"end":{"line":54,"column":32}}},"range":[991,1010],"loc":{"start":{"line":54,"column":13},"end":{"line":54,"column":32}}},"right":{"type":"CallExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1014,1018],"loc":{"start":{"line":54,"column":36},"end":{"line":54,"column":40}}},"property":{"type":"Identifier","name":"_validatorMeta","range":[1019,1033],"loc":{"start":{"line":54,"column":41},"end":{"line":54,"column":55}}},"range":[1014,1033],"loc":{"start":{"line":54,"column":36},"end":{"line":54,"column":55}}},"property":{"type":"Identifier","name":"byKey","range":[1034,1039],"loc":{"start":{"line":54,"column":56},"end":{"line":54,"column":61}}},"range":[1014,1039],"loc":{"start":{"line":54,"column":36},"end":{"line":54,"column":61}}},"arguments":[{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1040,1044],"loc":{"start":{"line":54,"column":62},"end":{"line":54,"column":66}}},"property":{"type":"Identifier","name":"validator","range":[1045,1054],"loc":{"start":{"line":54,"column":67},"end":{"line":54,"column":76}}},"range":[1040,1054],"loc":{"start":{"line":54,"column":62},"end":{"line":54,"column":76}}}],"range":[1014,1055],"loc":{"start":{"line":54,"column":36},"end":{"line":54,"column":77}}},"range":[991,1055],"loc":{"start":{"line":54,"column":13},"end":{"line":54,"column":77}}},"range":[984,1056],"loc":{"start":{"line":54,"column":6},"end":{"line":54,"column":78}}}],"range":[976,1062],"loc":{"start":{"line":53,"column":21},"end":{"line":55,"column":5}}},"generator":false,"expression":false,"range":[973,1062],"loc":{"start":{"line":53,"column":18},"end":{"line":55,"column":5}}},"kind":"get","method":false,"shorthand":false,"computed":false,"range":[959,1062],"loc":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}}},"params":[],"private":true,"function":true},{"name":"_validatorMeta","type":"Object","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"_validatorMeta","range":[841,855],"loc":{"start":{"line":43,"column":6},"end":{"line":43,"column":20}}},"value":{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"type","range":[867,871],"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":12}}},"value":{"type":"Identifier","name":"Object","range":[873,879],"loc":{"start":{"line":44,"column":14},"end":{"line":44,"column":20}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[867,879],"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":20}}}],"range":[857,887],"loc":{"start":{"line":43,"column":22},"end":{"line":45,"column":7}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[841,887],"loc":{"start":{"line":43,"column":6},"end":{"line":45,"column":7}}},"published":true,"private":true},{"name":"ready","type":"Function","javascriptNode":{"type":"Property","key":{"type":"Identifier","name":"ready","range":[1069,1074],"loc":{"start":{"line":57,"column":4},"end":{"line":57,"column":9}}},"value":{"type":"FunctionExpression","id":null,"params":[],"body":{"type":"BlockStatement","body":[{"type":"ExpressionStatement","expression":{"type":"AssignmentExpression","operator":"=","left":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1095,1099],"loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":10}}},"property":{"type":"Identifier","name":"_validatorMeta","range":[1100,1114],"loc":{"start":{"line":58,"column":11},"end":{"line":58,"column":25}}},"range":[1095,1114],"loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":25}}},"right":{"type":"NewExpression","callee":{"type":"MemberExpression","computed":false,"object":{"type":"Identifier","name":"Polymer","range":[1121,1128],"loc":{"start":{"line":58,"column":32},"end":{"line":58,"column":39}}},"property":{"type":"Identifier","name":"IronMeta","range":[1129,1137],"loc":{"start":{"line":58,"column":40},"end":{"line":58,"column":48}}},"range":[1121,1137],"loc":{"start":{"line":58,"column":32},"end":{"line":58,"column":48}}},"arguments":[{"type":"ObjectExpression","properties":[{"type":"Property","key":{"type":"Identifier","name":"type","range":[1139,1143],"loc":{"start":{"line":58,"column":50},"end":{"line":58,"column":54}}},"value":{"type":"MemberExpression","computed":false,"object":{"type":"ThisExpression","range":[1145,1149],"loc":{"start":{"line":58,"column":56},"end":{"line":58,"column":60}}},"property":{"type":"Identifier","name":"validatorType","range":[1150,1163],"loc":{"start":{"line":58,"column":61},"end":{"line":58,"column":74}}},"range":[1145,1163],"loc":{"start":{"line":58,"column":56},"end":{"line":58,"column":74}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[1139,1163],"loc":{"start":{"line":58,"column":50},"end":{"line":58,"column":74}}}],"range":[1138,1164],"loc":{"start":{"line":58,"column":49},"end":{"line":58,"column":75}}}],"range":[1117,1165],"loc":{"start":{"line":58,"column":28},"end":{"line":58,"column":76}}},"range":[1095,1165],"loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":76}}},"range":[1095,1166],"loc":{"start":{"line":58,"column":6},"end":{"line":58,"column":77}}}],"range":[1087,1172],"loc":{"start":{"line":57,"column":22},"end":{"line":59,"column":5}}},"generator":false,"expression":false,"range":[1076,1172],"loc":{"start":{"line":57,"column":11},"end":{"line":59,"column":5}}},"kind":"init","method":false,"shorthand":false,"computed":false,"range":[1069,1172],"loc":{"start":{"line":57,"column":4},"end":{"line":59,"column":5}}},"params":[],"private":true,"configuration":true,"function":true}],"contentHref":"/var/www/POLYMER/1/2/polymer-element-catalog/bower_components/iron-validatable-behavior/iron-validatable-behavior.html"}],"features":[],"elementsByTagName":{}}