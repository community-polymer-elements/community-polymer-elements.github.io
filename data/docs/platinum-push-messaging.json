{"elements":[{"type":"element","desc":"\n`<platinum-push-messaging>` sets up a [push messaging][1] subscription\nand allows you to define what happens when a push message is received.\n\nThe element can be placed anywhere, but should only be used once in a\npage. If there are multiple occurrences, only one will be active.\n\n# Sample\n\nFor a complete sample that uses the element, see the [Cat Push\nNotifications][3] project.\n\n# Requirements\nPush messaging is currently only available in Google Chrome, which\nrequires you to configure Google Cloud Messaging. Chrome will check that\nyour page links to a manifest file that contains a `gcm_sender_id` field.\nYou can find full details of how to set all of this up in the [HTML5\nRocks guide to push notifications][1].\n\n# Notification details\nThe data for how a notification should be displayed can come from one of\nthree places.\n\nFirstly, you can specify a URL from which to fetch the message data.\n```\n<platinum-push-messaging\n  message-url=\"notification-data.json\">\n</platinum-push-messaging>\n```\n\nThe second way is to send the message data in the body of\nthe push message from your server. In this case you do not need to\nconfigure anything in your page:\n```\n<platinum-push-messaging></platinum-push-messaging>\n```\n**Note that this method is not currently supported by any browser**. It\nis, however, defined in the\n[draft W3C specification](http://w3c.github.io/push-api/#the-push-event)\nand this element should use that data when it is implemented in the\nfuture.\n\nIf a message-url is provided then the message body will be ignored in\nfavor of the first method.\n\nThirdly, you can manually define the attributes on the element:\n```\n<platinum-push-messaging\n  title=\"Application updated\"\n  message=\"The application was updated in the background\"\n  icon-url=\"icon.png\"\n  click-url=\"notification.html\">\n</platinum-push-messaging>\n```\nThese values will also be used as defaults if one of the other methods\ndoes not provide a value for that property.\n\n# Testing\nIf you have set up Google Cloud Messaging then you can send push messages\nto your browser by following the guide in the [GCM documentation][2].\n\nHowever, for quick client testing there are two options. You can use the\n`testPush` method, which allows you to simulate a push message that\nincludes a payload.\n\nOr, at a lower level, you can open up chrome://serviceworker-internals in\nChrome and use the 'Push' button for the service worker corresponding to\nyour app.\n\n[1]: http://updates.html5rocks.com/2015/03/push-notificatons-on-the-open-web\n[2]: https://developer.android.com/google/gcm/http.html\n[3]: https://github.com/notwaldorf/caturday-post\n\n","events":[{"desc":"\nFired when a notification is clicked that had the current page as the\nclick URL.\n\n","jsdoc":{"description":"\nFired when a notification is clicked that had the current page as the\nclick URL.\n\n","tags":[{"tag":"event","type":null,"description":"platinum-push-messaging-click"},{"tag":"param","type":"Object","name":"The","description":"push message data used to create the notification"}],"orig":"*\n       * Fired when a notification is clicked that had the current page as the\n       * click URL.\n       *\n       * @event platinum-push-messaging-click\n       * @param {Object} The push message data used to create the notification\n       "},"name":"platinum-push-messaging-click","params":[{"type":"Object","desc":"push message data used to create the notification","name":"The"}]},{"desc":"\nFired when an error occurs while enabling or disabling notifications\n\n","jsdoc":{"description":"\nFired when an error occurs while enabling or disabling notifications\n\n","tags":[{"tag":"event","type":null,"description":"platinum-push-messaging-error"},{"tag":"param","type":"String","name":"The","description":"error message"}],"orig":"*\n       * Fired when an error occurs while enabling or disabling notifications\n       *\n       * @event platinum-push-messaging-error\n       * @param {String} The error message\n       "},"name":"platinum-push-messaging-error","params":[{"type":"String","desc":"error message","name":"The"}]},{"desc":"\nFired when a push message is received but no notification is shown.\nThis happens when the click URL is for this page and the page is\nvisible to the user on the screen.\n\n","jsdoc":{"description":"\nFired when a push message is received but no notification is shown.\nThis happens when the click URL is for this page and the page is\nvisible to the user on the screen.\n\n","tags":[{"tag":"event","type":null,"description":"platinum-push-messaging-push"},{"tag":"param","type":"Object","name":"The","description":"push message data that was received"}],"orig":"*\n       * Fired when a push message is received but no notification is shown.\n       * This happens when the click URL is for this page and the page is\n       * visible to the user on the screen.\n       *\n       * @event platinum-push-messaging-push\n       * @param {Object} The push message data that was received\n       "},"name":"platinum-push-messaging-push","params":[{"type":"Object","desc":"push message data that was received","name":"The"}]}],"properties":[{"name":"clickUrl","type":"String","desc":"\nThe default URL to display when a notification is clicked.\n         ","published":true,"default":"document.location.href"},{"name":"dir","type":"String","desc":"\nThe default text direction for the title and body of the\nnotification. Can be `auto`, `ltr` or `rtl`.\n         ","published":true,"default":"auto"},{"name":"disable","type":"Function","desc":"\nRequest push messaging to be disabled.\n\n","params":[],"function":true,"return":{"type":"Promise.<undefined>","desc":null}},{"name":"enable","type":"Function","desc":"\nRequest push messaging to be enabled.\n\n","params":[],"function":true,"return":{"type":"Promise.<undefined>","desc":null}},{"name":"enabled","type":"Boolean","desc":"\nIndicates the status of the element. If true, push messages will be\nreceived.\n         ","published":true,"readOnly":true,"notify":true,"default":false},{"name":"iconUrl","type":"string","desc":"\nThe URL of a default icon for notifications.\n         ","published":true},{"name":"lang","type":"string","desc":"\nThe default language to assume for the title and body of the\nnotification. If set this must be a valid\n[BCP 47](https://tools.ietf.org/html/bcp47) language tag.\n         ","published":true},{"name":"message","type":"string","desc":"\nThe default notification message.\n         ","published":true},{"name":"messageUrl","type":"string","desc":"\nA URL from which message information can be retrieved.\n\nWhen a push event happens that does not contain a message body this\nURL will be fetched. The document will be parsed as JSON, and should\nresult in an object.\n\nThe valid keys for the object are `title`, `message`, `url`, `icon`,\n`tag`, `dir`, `lang`, `noscreen`, `renotify`, `silent`, `sound`,\n`sticky` and `vibrate`. For documentation of these values see the\nattributes of the same names, except that these values override the\nelement attributes.\n         ","published":true},{"name":"noscreen","type":"Boolean","desc":"\nIf true then displaying the notification should not turn the device's\nscreen on.\n         ","published":true,"default":false},{"name":"renotify","type":"Boolean","desc":"\nWhen a notification is displayed that has the same `tag` as an\nexisting notification, the existing one will be replaced. If this\nflag is true then such a replacement will cause the user to be\nalerted as though it were a new notification, by vibration or sound\nas appropriate.\n         ","published":true,"default":false},{"name":"silent","type":"Boolean","desc":"\nIf true then displaying the notification should not cause any\nvibration or sound to be played.\n         ","published":true,"default":false},{"name":"sound","type":"string","desc":"\nThe URL of a default sound file to play when a notification is shown.\n         ","published":true},{"name":"sticky","type":"Boolean","desc":"\nIf true then the notification should be sticky, meaning that it is\nnot directly dismissable.\n         ","published":true,"default":false},{"name":"subscription","type":"PushSubscription","desc":"\nThe details of the current push subscription, if any.\n         ","published":true,"readOnly":true,"notify":true},{"name":"supported","type":"Boolean","desc":"\nIndicates whether the Push and Notification APIs are supported by\nthis browser.\n         ","published":true,"readOnly":true,"default":"SUPPORTED"},{"name":"tag","type":"string","desc":"\nA default tag for the notifications that will be generated by\nthis element. Notifications with the same tag will overwrite one\nanother, so that only one will be shown at once.\n         ","published":true},{"name":"testPush","type":"Function","desc":"\nProgrammatically trigger a push message\n\n","params":[{"name":"message","desc":"{Object} the message payload"}],"function":true},{"name":"title","type":"string","desc":"\nThe default notification title.\n         ","published":true},{"name":"vibrate","type":"Array","desc":"\nThe pattern of vibration that should be used by default when a\nnotification is displayed. See\n         ","published":true},{"name":"_getRegistration","type":"Function","desc":"\nReturns a promise which will resolve to the registration object\nassociated with our current service worker.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<ServiceWorkerRegistration>","desc":null}},{"name":"_getWorkerURL","type":"Function","desc":"\nDetermine the URL of the worker based on the currently set parameters\n\n","params":[],"private":true,"function":true},{"name":"_messageHandler","type":"Function","desc":"\nEvent handler for the `message` event.\n\n","params":[{"name":"event","desc":"{MessageEvent}"}],"private":true,"function":true},{"name":"_registrationReady","type":"Function","desc":"\nReturns a promise that will resolve when the given registration becomes\nactive.\n\n","params":[{"name":"registration","desc":"{ServiceWorkerRegistration}"}],"private":true,"function":true,"return":{"type":"Promise.<undefined>","desc":null}},{"name":"_serializeOptions","type":"Function","desc":"\nTakes an options object and creates a stable JSON serialization of it.\nThis naive algorithm will only work if the object contains only\nnon-nested properties.\n\n","params":[{"name":"options","desc":"{Object.<String, ?(String|Number|Boolean)>}"}],"private":true,"function":true},{"name":"_updateSubscription","type":"Function","desc":"\nUpdate the subscription property, but only if the value has changed.\nThis prevents triggering the subscription-changed event twice on page\nload.\n       ","params":[{"name":"subscription"}],"private":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"platinum-push-messaging","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/platinum-push-messaging/platinum-push-messaging.html","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/","description":""}]},"demos":[{"desc":"demo","path":"demo/"}]}],"behaviors":[],"features":[],"elementsByTagName":{"platinum-push-messaging":{"type":"element","desc":"\n`<platinum-push-messaging>` sets up a [push messaging][1] subscription\nand allows you to define what happens when a push message is received.\n\nThe element can be placed anywhere, but should only be used once in a\npage. If there are multiple occurrences, only one will be active.\n\n# Sample\n\nFor a complete sample that uses the element, see the [Cat Push\nNotifications][3] project.\n\n# Requirements\nPush messaging is currently only available in Google Chrome, which\nrequires you to configure Google Cloud Messaging. Chrome will check that\nyour page links to a manifest file that contains a `gcm_sender_id` field.\nYou can find full details of how to set all of this up in the [HTML5\nRocks guide to push notifications][1].\n\n# Notification details\nThe data for how a notification should be displayed can come from one of\nthree places.\n\nFirstly, you can specify a URL from which to fetch the message data.\n```\n<platinum-push-messaging\n  message-url=\"notification-data.json\">\n</platinum-push-messaging>\n```\n\nThe second way is to send the message data in the body of\nthe push message from your server. In this case you do not need to\nconfigure anything in your page:\n```\n<platinum-push-messaging></platinum-push-messaging>\n```\n**Note that this method is not currently supported by any browser**. It\nis, however, defined in the\n[draft W3C specification](http://w3c.github.io/push-api/#the-push-event)\nand this element should use that data when it is implemented in the\nfuture.\n\nIf a message-url is provided then the message body will be ignored in\nfavor of the first method.\n\nThirdly, you can manually define the attributes on the element:\n```\n<platinum-push-messaging\n  title=\"Application updated\"\n  message=\"The application was updated in the background\"\n  icon-url=\"icon.png\"\n  click-url=\"notification.html\">\n</platinum-push-messaging>\n```\nThese values will also be used as defaults if one of the other methods\ndoes not provide a value for that property.\n\n# Testing\nIf you have set up Google Cloud Messaging then you can send push messages\nto your browser by following the guide in the [GCM documentation][2].\n\nHowever, for quick client testing there are two options. You can use the\n`testPush` method, which allows you to simulate a push message that\nincludes a payload.\n\nOr, at a lower level, you can open up chrome://serviceworker-internals in\nChrome and use the 'Push' button for the service worker corresponding to\nyour app.\n\n[1]: http://updates.html5rocks.com/2015/03/push-notificatons-on-the-open-web\n[2]: https://developer.android.com/google/gcm/http.html\n[3]: https://github.com/notwaldorf/caturday-post\n\n","events":[{"desc":"\nFired when a notification is clicked that had the current page as the\nclick URL.\n\n","jsdoc":{"description":"\nFired when a notification is clicked that had the current page as the\nclick URL.\n\n","tags":[{"tag":"event","type":null,"description":"platinum-push-messaging-click"},{"tag":"param","type":"Object","name":"The","description":"push message data used to create the notification"}],"orig":"*\n       * Fired when a notification is clicked that had the current page as the\n       * click URL.\n       *\n       * @event platinum-push-messaging-click\n       * @param {Object} The push message data used to create the notification\n       "},"name":"platinum-push-messaging-click","params":[{"type":"Object","desc":"push message data used to create the notification","name":"The"}]},{"desc":"\nFired when an error occurs while enabling or disabling notifications\n\n","jsdoc":{"description":"\nFired when an error occurs while enabling or disabling notifications\n\n","tags":[{"tag":"event","type":null,"description":"platinum-push-messaging-error"},{"tag":"param","type":"String","name":"The","description":"error message"}],"orig":"*\n       * Fired when an error occurs while enabling or disabling notifications\n       *\n       * @event platinum-push-messaging-error\n       * @param {String} The error message\n       "},"name":"platinum-push-messaging-error","params":[{"type":"String","desc":"error message","name":"The"}]},{"desc":"\nFired when a push message is received but no notification is shown.\nThis happens when the click URL is for this page and the page is\nvisible to the user on the screen.\n\n","jsdoc":{"description":"\nFired when a push message is received but no notification is shown.\nThis happens when the click URL is for this page and the page is\nvisible to the user on the screen.\n\n","tags":[{"tag":"event","type":null,"description":"platinum-push-messaging-push"},{"tag":"param","type":"Object","name":"The","description":"push message data that was received"}],"orig":"*\n       * Fired when a push message is received but no notification is shown.\n       * This happens when the click URL is for this page and the page is\n       * visible to the user on the screen.\n       *\n       * @event platinum-push-messaging-push\n       * @param {Object} The push message data that was received\n       "},"name":"platinum-push-messaging-push","params":[{"type":"Object","desc":"push message data that was received","name":"The"}]}],"properties":[{"name":"clickUrl","type":"String","desc":"\nThe default URL to display when a notification is clicked.\n         ","published":true,"default":"document.location.href"},{"name":"dir","type":"String","desc":"\nThe default text direction for the title and body of the\nnotification. Can be `auto`, `ltr` or `rtl`.\n         ","published":true,"default":"auto"},{"name":"disable","type":"Function","desc":"\nRequest push messaging to be disabled.\n\n","params":[],"function":true,"return":{"type":"Promise.<undefined>","desc":null}},{"name":"enable","type":"Function","desc":"\nRequest push messaging to be enabled.\n\n","params":[],"function":true,"return":{"type":"Promise.<undefined>","desc":null}},{"name":"enabled","type":"Boolean","desc":"\nIndicates the status of the element. If true, push messages will be\nreceived.\n         ","published":true,"readOnly":true,"notify":true,"default":false},{"name":"iconUrl","type":"string","desc":"\nThe URL of a default icon for notifications.\n         ","published":true},{"name":"lang","type":"string","desc":"\nThe default language to assume for the title and body of the\nnotification. If set this must be a valid\n[BCP 47](https://tools.ietf.org/html/bcp47) language tag.\n         ","published":true},{"name":"message","type":"string","desc":"\nThe default notification message.\n         ","published":true},{"name":"messageUrl","type":"string","desc":"\nA URL from which message information can be retrieved.\n\nWhen a push event happens that does not contain a message body this\nURL will be fetched. The document will be parsed as JSON, and should\nresult in an object.\n\nThe valid keys for the object are `title`, `message`, `url`, `icon`,\n`tag`, `dir`, `lang`, `noscreen`, `renotify`, `silent`, `sound`,\n`sticky` and `vibrate`. For documentation of these values see the\nattributes of the same names, except that these values override the\nelement attributes.\n         ","published":true},{"name":"noscreen","type":"Boolean","desc":"\nIf true then displaying the notification should not turn the device's\nscreen on.\n         ","published":true,"default":false},{"name":"renotify","type":"Boolean","desc":"\nWhen a notification is displayed that has the same `tag` as an\nexisting notification, the existing one will be replaced. If this\nflag is true then such a replacement will cause the user to be\nalerted as though it were a new notification, by vibration or sound\nas appropriate.\n         ","published":true,"default":false},{"name":"silent","type":"Boolean","desc":"\nIf true then displaying the notification should not cause any\nvibration or sound to be played.\n         ","published":true,"default":false},{"name":"sound","type":"string","desc":"\nThe URL of a default sound file to play when a notification is shown.\n         ","published":true},{"name":"sticky","type":"Boolean","desc":"\nIf true then the notification should be sticky, meaning that it is\nnot directly dismissable.\n         ","published":true,"default":false},{"name":"subscription","type":"PushSubscription","desc":"\nThe details of the current push subscription, if any.\n         ","published":true,"readOnly":true,"notify":true},{"name":"supported","type":"Boolean","desc":"\nIndicates whether the Push and Notification APIs are supported by\nthis browser.\n         ","published":true,"readOnly":true,"default":"SUPPORTED"},{"name":"tag","type":"string","desc":"\nA default tag for the notifications that will be generated by\nthis element. Notifications with the same tag will overwrite one\nanother, so that only one will be shown at once.\n         ","published":true},{"name":"testPush","type":"Function","desc":"\nProgrammatically trigger a push message\n\n","params":[{"name":"message","desc":"{Object} the message payload"}],"function":true},{"name":"title","type":"string","desc":"\nThe default notification title.\n         ","published":true},{"name":"vibrate","type":"Array","desc":"\nThe pattern of vibration that should be used by default when a\nnotification is displayed. See\n         ","published":true},{"name":"_getRegistration","type":"Function","desc":"\nReturns a promise which will resolve to the registration object\nassociated with our current service worker.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<ServiceWorkerRegistration>","desc":null}},{"name":"_getWorkerURL","type":"Function","desc":"\nDetermine the URL of the worker based on the currently set parameters\n\n","params":[],"private":true,"function":true},{"name":"_messageHandler","type":"Function","desc":"\nEvent handler for the `message` event.\n\n","params":[{"name":"event","desc":"{MessageEvent}"}],"private":true,"function":true},{"name":"_registrationReady","type":"Function","desc":"\nReturns a promise that will resolve when the given registration becomes\nactive.\n\n","params":[{"name":"registration","desc":"{ServiceWorkerRegistration}"}],"private":true,"function":true,"return":{"type":"Promise.<undefined>","desc":null}},{"name":"_serializeOptions","type":"Function","desc":"\nTakes an options object and creates a stable JSON serialization of it.\nThis naive algorithm will only work if the object contains only\nnon-nested properties.\n\n","params":[{"name":"options","desc":"{Object.<String, ?(String|Number|Boolean)>}"}],"private":true,"function":true},{"name":"_updateSubscription","type":"Function","desc":"\nUpdate the subscription property, but only if the value has changed.\nThis prevents triggering the subscription-changed event twice on page\nload.\n       ","params":[{"name":"subscription"}],"private":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"platinum-push-messaging","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/platinum-push-messaging/platinum-push-messaging.html","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/","description":""}]},"demos":[{"desc":"demo","path":"demo/"}]}}}