{"elements":[{"type":"element","desc":"\nElement wrapper for the [marked](https://github.com/chjj/marked) library.\n\n`<marked-element>` accepts Markdown source, and renders it to a child\nelement with the class `markdown-html`. This child element can be styled\nas you would a normal DOM element. If you do not provide a child element\nwith the `markdown-html` class, the Markdown source will still be rendered,\nbut to a shadow DOM child that cannot be styled.\n\nThe Markdown source can be specified either via the `markdown` attribute:\n\n    <marked-element markdown=\"`Markdown` is _awesome_!\">\n      <div class=\"markdown-html\"></div>\n    </marked-element>\n\nOr, you can provide it via a `<script type=\"text/markdown\">` element child:\n\n    <marked-element>\n      <div class=\"markdown-html\"></div>\n      <script type=\"text/markdown\">\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        <awesome-sauce>\n          <div>Oops, I'm about to forget to close this div.\n        </awesome-sauce>\n        ```\n      </script>\n    </marked-element>\n\nNote that the `<script type=\"text/markdown\">` approach is _static_. Changes to\nthe script content will _not_ update the rendered markdown!\n\n### Styling\nIf you are using a child with the `markdown-html` class, you can style it\nas you would a regular DOM element:\n\n    .markdown-html p {\n      color: red;\n    }\n\n    .markdown-html td:first-child {\n      padding-left: 24px;\n    }\n\n","events":[],"properties":[{"name":"markdown","type":"String","desc":"The markdown source that should be rendered by this element. ","published":true,"observer":"render","observerNode":{"type":"Literal","value":"render","raw":"'render'","range":[188,196],"loc":{"start":{"line":13,"column":18},"end":{"line":13,"column":26}}},"default":null},{"name":"outputElement","type":"Function","params":[],"function":true},{"name":"render","type":"Function","desc":"\nRenders `markdown` into this element's DOM.\n\nThis is automatically called whenever the `markdown` property is changed.\n\nThe only case where you should be calling this is if you are providing\nmarkdown via `<script type=\"text/markdown\">` after this element has been\nconstructed (or updating that markdown).\n     ","params":[],"function":true},{"name":"_highlight","type":"Function","params":[{"name":"code"},{"name":"lang"}],"private":true,"function":true},{"name":"_unindent","type":"Function","params":[{"name":"text"}],"private":true,"function":true},{"name":"attached","type":"Function","desc":"\nRenders `markdown` to HTML when the element is attached.\n\nThis serves a dual purpose:\n\n * Prevents unnecessary work (no need to render when not visible).\n\n * `attached` fires top-down, so we can give ancestors a chance to\n   register listeners for the `syntax-highlight` event _before_ we render\n   any markdown.\n\n     ","params":[],"private":true,"configuration":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"marked-element","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/marked-element/marked-element.html","jsdoc":{"tags":[{"tag":"element","type":null,"description":"marked-element"},{"tag":"group","type":null,"description":"Molecules"},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}],"behaviors":[],"features":[],"elementsByTagName":{"marked-element":{"type":"element","desc":"\nElement wrapper for the [marked](https://github.com/chjj/marked) library.\n\n`<marked-element>` accepts Markdown source, and renders it to a child\nelement with the class `markdown-html`. This child element can be styled\nas you would a normal DOM element. If you do not provide a child element\nwith the `markdown-html` class, the Markdown source will still be rendered,\nbut to a shadow DOM child that cannot be styled.\n\nThe Markdown source can be specified either via the `markdown` attribute:\n\n    <marked-element markdown=\"`Markdown` is _awesome_!\">\n      <div class=\"markdown-html\"></div>\n    </marked-element>\n\nOr, you can provide it via a `<script type=\"text/markdown\">` element child:\n\n    <marked-element>\n      <div class=\"markdown-html\"></div>\n      <script type=\"text/markdown\">\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        <awesome-sauce>\n          <div>Oops, I'm about to forget to close this div.\n        </awesome-sauce>\n        ```\n      </script>\n    </marked-element>\n\nNote that the `<script type=\"text/markdown\">` approach is _static_. Changes to\nthe script content will _not_ update the rendered markdown!\n\n### Styling\nIf you are using a child with the `markdown-html` class, you can style it\nas you would a regular DOM element:\n\n    .markdown-html p {\n      color: red;\n    }\n\n    .markdown-html td:first-child {\n      padding-left: 24px;\n    }\n\n","events":[],"properties":[{"name":"markdown","type":"String","desc":"The markdown source that should be rendered by this element. ","published":true,"observer":"render","observerNode":{"type":"Literal","value":"render","raw":"'render'","range":[188,196],"loc":{"start":{"line":13,"column":18},"end":{"line":13,"column":26}}},"default":null},{"name":"outputElement","type":"Function","params":[],"function":true},{"name":"render","type":"Function","desc":"\nRenders `markdown` into this element's DOM.\n\nThis is automatically called whenever the `markdown` property is changed.\n\nThe only case where you should be calling this is if you are providing\nmarkdown via `<script type=\"text/markdown\">` after this element has been\nconstructed (or updating that markdown).\n     ","params":[],"function":true},{"name":"_highlight","type":"Function","params":[{"name":"code"},{"name":"lang"}],"private":true,"function":true},{"name":"_unindent","type":"Function","params":[{"name":"text"}],"private":true,"function":true},{"name":"attached","type":"Function","desc":"\nRenders `markdown` to HTML when the element is attached.\n\nThis serves a dual purpose:\n\n * Prevents unnecessary work (no need to render when not visible).\n\n * `attached` fires top-down, so we can give ancestors a chance to\n   register listeners for the `syntax-highlight` event _before_ we render\n   any markdown.\n\n     ","params":[],"private":true,"configuration":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"marked-element","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/marked-element/marked-element.html","jsdoc":{"tags":[{"tag":"element","type":null,"description":"marked-element"},{"tag":"group","type":null,"description":"Molecules"},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}}}