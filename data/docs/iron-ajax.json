{"elements":[{"type":"element","desc":"\nThe `iron-ajax` element exposes network request functionality.\n\n    <iron-ajax\n        auto\n        url=\"http://gdata.youtube.com/feeds/api/videos/\"\n        params='{\"alt\":\"json\", \"q\":\"chrome\"}'\n        handle-as=\"json\"\n        on-response=\"handleResponse\"\n        debounce-duration=\"300\"></iron-ajax>\n\nWith `auto` set to `true`, the element performs a request whenever\nits `url`, `params` or `body` properties are changed. Automatically generated\nrequests will be debounced in the case that multiple attributes are changed\nsequentially.\n\nNote: The `params` attribute must be double quoted JSON.\n\nYou can trigger a request explicitly by calling `generateRequest` on the\nelement.\n\n","events":[{"desc":"\nFired when an error is received.\n\n","jsdoc":{"description":"\nFired when an error is received.\n\n","tags":[{"tag":"event","type":null,"description":"error"}],"orig":"*\n     * Fired when an error is received.\n     *\n     * @event error\n     "},"name":"error","params":[]},{"desc":"\nFired when a request is sent.\n\n","jsdoc":{"description":"\nFired when a request is sent.\n\n","tags":[{"tag":"event","type":null,"description":"request"}],"orig":"*\n     * Fired when a request is sent.\n     *\n     * @event request\n     "},"name":"request","params":[]},{"desc":"\nFired when a response is received.\n\n","jsdoc":{"description":"\nFired when a response is received.\n\n","tags":[{"tag":"event","type":null,"description":"response"}],"orig":"*\n     * Fired when a response is received.\n     *\n     * @event response\n     "},"name":"response","params":[]}],"properties":[{"name":"activeRequests","type":"Array","desc":"\nAn Array of all in-flight requests originating from this iron-ajax\nelement.\n       ","published":true,"notify":true,"readOnly":true,"default":"[]"},{"name":"auto","type":"Boolean","desc":"\nIf true, automatically performs an Ajax request when either `url` or\n`params` changes.\n       ","published":true,"default":false},{"name":"body","type":"Object","desc":"\nBody content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).\n\n","published":true,"default":null},{"name":"contentType","type":"String","desc":"\nContent type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\n       ","published":true,"default":null},{"name":"debounceDuration","type":"Number","desc":"\nLength of time in milliseconds to debounce multiple requests.\n       ","published":true,"default":0,"notify":true},{"name":"generateRequest","type":"Function","desc":"\nPerforms an AJAX request to the specified URL.\n\n","params":[],"function":true,"return":{"type":"!IronRequestElement","desc":null}},{"name":"handleAs","type":"String","desc":"\nSpecifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.\n       ","published":true,"default":"json"},{"name":"headers","type":"Object","desc":"\nHTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.\n       ","published":true,"default":"{}"},{"name":"lastError","type":"Object","desc":"\nlastRequest's error, if any.\n       ","published":true,"notify":true,"readOnly":true},{"name":"lastRequest","type":"Object","desc":"\nThe most recent request made by this iron-ajax element.\n       ","published":true,"notify":true,"readOnly":true},{"name":"lastResponse","type":"Object","desc":"\nlastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.\n       ","published":true,"notify":true,"readOnly":true},{"name":"loading","type":"Boolean","desc":"\nTrue while lastRequest is in flight.\n       ","published":true,"notify":true,"readOnly":true},{"name":"method","type":"String","desc":"\nThe HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.\n       ","published":true,"default":"GET"},{"name":"params","type":"Object","desc":"\nAn object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.\n       ","published":true,"default":"{}"},{"name":"queryString","type":"Function","desc":"\nThe query string that should be appended to the `url`, serialized from\nthe current value of `params`.\n\n","params":[],"function":true,"return":{"type":"string","desc":null}},{"name":"requestHeaders","type":"Function","desc":"\nAn object that maps header names to header values, first applying the\nthe value of `Content-Type` and then overlaying the headers specified\nin the `headers` property.\n\n","params":[],"function":true,"return":{"type":"Object","desc":null}},{"name":"requestUrl","type":"Function","desc":"\nThe `url` with query string (if `params` are specified), suitable for\nproviding to an `iron-request` instance.\n\n","params":[],"function":true,"return":{"type":"string","desc":null}},{"name":"sync","type":"Boolean","desc":"\nToggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doingâ„¢.\n       ","published":true,"default":false},{"name":"timeout","type":"Number","desc":"\nSet the timeout flag on the request.\n       ","published":true,"default":0},{"name":"toRequestOptions","type":"Function","desc":"\nRequest options suitable for generating an `iron-request` instance based\non the current state of the `iron-ajax` instance's properties.\n\n","params":[],"function":true,"return":{"type":"{url: string, method: (string|undefined), async: (boolean|undefined), body: (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object), headers: (Object|undefined), handleAs: (string|undefined), withCredentials: (boolean|undefined)}","desc":null}},{"name":"url","type":"String","desc":"\nThe URL target of the request.\n       ","published":true,"default":""},{"name":"verbose","type":"Boolean","desc":"\nIf true, error messages will automatically be logged to the console.\n       ","published":true,"default":false},{"name":"withCredentials","type":"Boolean","desc":"\nSet the withCredentials flag on the request.\n       ","published":true,"default":false},{"name":"_boundHandleResponse","type":"Function","published":true,"default":"UNKNOWN","private":true,"function":true},{"name":"_discardRequest","type":"Function","params":[{"name":"request"}],"private":true,"function":true},{"name":"_handleError","type":"Function","params":[{"name":"request"},{"name":"error"}],"private":true,"function":true},{"name":"_handleResponse","type":"Function","params":[{"name":"request"}],"private":true,"function":true},{"name":"_requestOptionsChanged","type":"Function","params":[],"private":true,"function":true},{"name":"hostAttributes","type":"Object","desc":"\nFired when an error is received.\n\n","jsdoc":{"tags":[{"tag":"event","type":null,"description":"error"}]},"private":true,"configuration":true}],"behaviors":[],"observers":[{"javascriptNode":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"_requestOptionsChanged(url, method, params.*, headers,","raw":"'_requestOptionsChanged(url, method, params.*, headers,'","range":[5916,5972],"loc":{"start":{"line":255,"column":6},"end":{"line":255,"column":62}}},"right":{"type":"Literal","value":"contentType, body, sync, handleAs, withCredentials, timeout, auto)","raw":"'contentType, body, sync, handleAs, withCredentials, timeout, auto)'","range":[5983,6051],"loc":{"start":{"line":256,"column":8},"end":{"line":256,"column":76}}},"range":[5916,6051],"loc":{"start":{"line":255,"column":6},"end":{"line":256,"column":76}}},"expression":"UNKNOWN"}],"is":"iron-ajax","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/iron-ajax/iron-ajax.html","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"hero","type":null,"name":"hero.svg","description":null}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},{"type":"element","desc":"\niron-request can be used to perform XMLHttpRequests.\n\n    <iron-request id=\"xhr\"></iron-request>\n    ...\n    this.$.xhr.send({url: url, params: params});\n","events":[],"properties":[{"name":"abort","type":"Function","desc":"\nAborts the request.\n     ","params":[],"function":true},{"name":"aborted","type":"Boolean","desc":"\nAborted will be true if an abort of the request is attempted.\n       ","published":true,"notify":true,"readOnly":true,"default":false},{"name":"completes","type":"Promise","desc":"\nA promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\n\n","published":true,"readOnly":true,"notify":true,"default":"UNKNOWN"},{"name":"errored","type":"Boolean","desc":"\nErrored will be true if the browser fired an error event from the\nXHR object (mainly network errors).\n       ","published":true,"notify":true,"readOnly":true,"default":false},{"name":"parseResponse","type":"Function","desc":"\nAttempts to parse the response body of the XHR. If parsing succeeds,\nthe value returned will be deserialized based on the `responseType`\nset on the XHR.\n\n","params":[],"function":true,"return":{"type":"*","desc":"The parsed response,\nor undefined if there was an empty response or parsing failed."}},{"name":"progress","type":"Object","desc":"\nAn object that contains progress information emitted by the XHR if\navailable.\n\n","published":true,"notify":true,"readOnly":true,"default":"{}","jsdoc":{"tags":[{"tag":"default","type":null,"description":"{}"}]}},{"name":"response","type":"*","desc":"\nA reference to the parsed response body, if the `xhr` has completely\nresolved.\n\n","published":true,"notify":true,"readOnly":true,"default":"null","jsdoc":{"tags":[{"tag":"default","type":null,"description":"null"}]}},{"name":"send","type":"Function","desc":"\nSends an HTTP request to the server and returns the XHR object.\n\n","params":[{"name":"options","type":"{url: string, method: (string|undefined), async: (boolean|undefined), body: (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object), headers: (Object|undefined), handleAs: (string|undefined), withCredentials: (boolean|undefined)}","desc":"    url The url to which the request is sent.\n    method The HTTP method to use, default is GET.\n    async By default, all requests are sent asynchronously. To send synchronous requests,\n        set to true.\n    body The content for the request body for POST method.\n    headers HTTP request headers.\n    handleAs The response type. Default is 'text'.\n    withCredentials Whether or not to send credentials on the request. Default is false.\n  timeout: (Number|undefined)"}],"function":true,"return":{"type":"Promise","desc":null}},{"name":"status","type":"Number","desc":"\nA reference to the status code, if the `xhr` has completely resolved.\n       ","published":true,"notify":true,"readOnly":true,"default":0},{"name":"statusText","type":"String","desc":"\nA reference to the status text, if the `xhr` has completely resolved.\n       ","published":true,"notify":true,"readOnly":true,"default":""},{"name":"succeeded","type":"Function","desc":"\nSucceeded is true if the request succeeded. The request succeeded if it\nloaded without error, wasn't aborted, and the status code is â‰¥ 200, and\n< 300, or if the status code is 0.\n\nThe status code 0 is accepted as a success because some schemes - e.g.\nfile:// - don't provide status codes.\n\n","params":[],"function":true,"return":{"type":"boolean","desc":null}},{"name":"timedOut","type":"Boolean","desc":"\nTimedOut will be true if the XHR threw a timeout event.\n       ","published":true,"notify":true,"readOnly":true,"default":false},{"name":"xhr","type":"XMLHttpRequest","desc":"\nA reference to the XMLHttpRequest instance used to generate the\nnetwork request.\n\n","published":true,"notify":true,"readOnly":true,"default":"UNKNOWN"},{"name":"_encodeBodyObject","type":"Function","desc":"\n","params":[{"name":"body","type":"*","desc":"The given body of the request to try and encode."},{"name":"contentType","type":"?string","desc":"The given content type, to infer an encoding\n    from."}],"private":true,"function":true,"return":{"type":"*","desc":"Either the encoded body as a string, if successful,\n    or the unaltered body object if no encoding could be inferred."}},{"name":"_updateStatus","type":"Function","desc":"\nUpdates the status code and status text.\n     ","params":[],"private":true,"function":true},{"name":"_wwwFormUrlEncode","type":"Function","desc":"\n","params":[{"name":"object","type":"Object","desc":"The object to encode as x-www-form-urlencoded."}],"private":true,"function":true,"return":{"type":"string","desc":"."}},{"name":"_wwwFormUrlEncodePiece","type":"Function","desc":"\n","params":[{"name":"str","type":"*","desc":"A key or value to encode as x-www-form-urlencoded."}],"private":true,"function":true,"return":{"type":"string","desc":"."}},{"name":"hostAttributes","type":"Object","private":true,"configuration":true}],"behaviors":[],"observers":[],"is":"iron-request","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/iron-ajax/iron-request.html","demos":[]}],"behaviors":[],"features":[],"elementsByTagName":{"iron-ajax":{"type":"element","desc":"\nThe `iron-ajax` element exposes network request functionality.\n\n    <iron-ajax\n        auto\n        url=\"http://gdata.youtube.com/feeds/api/videos/\"\n        params='{\"alt\":\"json\", \"q\":\"chrome\"}'\n        handle-as=\"json\"\n        on-response=\"handleResponse\"\n        debounce-duration=\"300\"></iron-ajax>\n\nWith `auto` set to `true`, the element performs a request whenever\nits `url`, `params` or `body` properties are changed. Automatically generated\nrequests will be debounced in the case that multiple attributes are changed\nsequentially.\n\nNote: The `params` attribute must be double quoted JSON.\n\nYou can trigger a request explicitly by calling `generateRequest` on the\nelement.\n\n","events":[{"desc":"\nFired when an error is received.\n\n","jsdoc":{"description":"\nFired when an error is received.\n\n","tags":[{"tag":"event","type":null,"description":"error"}],"orig":"*\n     * Fired when an error is received.\n     *\n     * @event error\n     "},"name":"error","params":[]},{"desc":"\nFired when a request is sent.\n\n","jsdoc":{"description":"\nFired when a request is sent.\n\n","tags":[{"tag":"event","type":null,"description":"request"}],"orig":"*\n     * Fired when a request is sent.\n     *\n     * @event request\n     "},"name":"request","params":[]},{"desc":"\nFired when a response is received.\n\n","jsdoc":{"description":"\nFired when a response is received.\n\n","tags":[{"tag":"event","type":null,"description":"response"}],"orig":"*\n     * Fired when a response is received.\n     *\n     * @event response\n     "},"name":"response","params":[]}],"properties":[{"name":"activeRequests","type":"Array","desc":"\nAn Array of all in-flight requests originating from this iron-ajax\nelement.\n       ","published":true,"notify":true,"readOnly":true,"default":"[]"},{"name":"auto","type":"Boolean","desc":"\nIf true, automatically performs an Ajax request when either `url` or\n`params` changes.\n       ","published":true,"default":false},{"name":"body","type":"Object","desc":"\nBody content to send with the request, typically used with \"POST\"\nrequests.\n\nIf body is a string it will be sent unmodified.\n\nIf Content-Type is set to a value listed below, then\nthe body will be encoded accordingly.\n\n   * `content-type=\"application/json\"`\n     * body is encoded like `{\"foo\":\"bar baz\",\"x\":1}`\n   * `content-type=\"application/x-www-form-urlencoded\"`\n     * body is encoded like `foo=bar+baz&x=1`\n\nOtherwise the body will be passed to the browser unmodified, and it\nwill handle any encoding (e.g. for FormData, Blob, ArrayBuffer).\n\n","published":true,"default":null},{"name":"contentType","type":"String","desc":"\nContent type to use when sending data. If the `contentType` property\nis set and a `Content-Type` header is specified in the `headers`\nproperty, the `headers` property value will take precedence.\n       ","published":true,"default":null},{"name":"debounceDuration","type":"Number","desc":"\nLength of time in milliseconds to debounce multiple requests.\n       ","published":true,"default":0,"notify":true},{"name":"generateRequest","type":"Function","desc":"\nPerforms an AJAX request to the specified URL.\n\n","params":[],"function":true,"return":{"type":"!IronRequestElement","desc":null}},{"name":"handleAs","type":"String","desc":"\nSpecifies what data to store in the `response` property, and\nto deliver as `event.detail.response` in `response` events.\n\nOne of:\n\n   `text`: uses `XHR.responseText`.\n\n   `xml`: uses `XHR.responseXML`.\n\n   `json`: uses `XHR.responseText` parsed as JSON.\n\n   `arraybuffer`: uses `XHR.response`.\n\n   `blob`: uses `XHR.response`.\n\n   `document`: uses `XHR.response`.\n       ","published":true,"default":"json"},{"name":"headers","type":"Object","desc":"\nHTTP request headers to send.\n\nExample:\n\n    <iron-ajax\n        auto\n        url=\"http://somesite.com\"\n        headers='{\"X-Requested-With\": \"XMLHttpRequest\"}'\n        handle-as=\"json\"></iron-ajax>\n\nNote: setting a `Content-Type` header here will override the value\nspecified by the `contentType` property of this element.\n       ","published":true,"default":"{}"},{"name":"lastError","type":"Object","desc":"\nlastRequest's error, if any.\n       ","published":true,"notify":true,"readOnly":true},{"name":"lastRequest","type":"Object","desc":"\nThe most recent request made by this iron-ajax element.\n       ","published":true,"notify":true,"readOnly":true},{"name":"lastResponse","type":"Object","desc":"\nlastRequest's response.\n\nNote that lastResponse and lastError are set when lastRequest finishes,\nso if loading is true, then lastResponse and lastError will correspond\nto the result of the previous request.\n\nThe type of the response is determined by the value of `handleAs` at\nthe time that the request was generated.\n       ","published":true,"notify":true,"readOnly":true},{"name":"loading","type":"Boolean","desc":"\nTrue while lastRequest is in flight.\n       ","published":true,"notify":true,"readOnly":true},{"name":"method","type":"String","desc":"\nThe HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.\nDefault is 'GET'.\n       ","published":true,"default":"GET"},{"name":"params","type":"Object","desc":"\nAn object that contains query parameters to be appended to the\nspecified `url` when generating a request. If you wish to set the body\ncontent when making a POST request, you should use the `body` property\ninstead.\n       ","published":true,"default":"{}"},{"name":"queryString","type":"Function","desc":"\nThe query string that should be appended to the `url`, serialized from\nthe current value of `params`.\n\n","params":[],"function":true,"return":{"type":"string","desc":null}},{"name":"requestHeaders","type":"Function","desc":"\nAn object that maps header names to header values, first applying the\nthe value of `Content-Type` and then overlaying the headers specified\nin the `headers` property.\n\n","params":[],"function":true,"return":{"type":"Object","desc":null}},{"name":"requestUrl","type":"Function","desc":"\nThe `url` with query string (if `params` are specified), suitable for\nproviding to an `iron-request` instance.\n\n","params":[],"function":true,"return":{"type":"string","desc":null}},{"name":"sync","type":"Boolean","desc":"\nToggle whether XHR is synchronous or asynchronous. Don't change this\nto true unless You Know What You Are Doingâ„¢.\n       ","published":true,"default":false},{"name":"timeout","type":"Number","desc":"\nSet the timeout flag on the request.\n       ","published":true,"default":0},{"name":"toRequestOptions","type":"Function","desc":"\nRequest options suitable for generating an `iron-request` instance based\non the current state of the `iron-ajax` instance's properties.\n\n","params":[],"function":true,"return":{"type":"{url: string, method: (string|undefined), async: (boolean|undefined), body: (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object), headers: (Object|undefined), handleAs: (string|undefined), withCredentials: (boolean|undefined)}","desc":null}},{"name":"url","type":"String","desc":"\nThe URL target of the request.\n       ","published":true,"default":""},{"name":"verbose","type":"Boolean","desc":"\nIf true, error messages will automatically be logged to the console.\n       ","published":true,"default":false},{"name":"withCredentials","type":"Boolean","desc":"\nSet the withCredentials flag on the request.\n       ","published":true,"default":false},{"name":"_boundHandleResponse","type":"Function","published":true,"default":"UNKNOWN","private":true,"function":true},{"name":"_discardRequest","type":"Function","params":[{"name":"request"}],"private":true,"function":true},{"name":"_handleError","type":"Function","params":[{"name":"request"},{"name":"error"}],"private":true,"function":true},{"name":"_handleResponse","type":"Function","params":[{"name":"request"}],"private":true,"function":true},{"name":"_requestOptionsChanged","type":"Function","params":[],"private":true,"function":true},{"name":"hostAttributes","type":"Object","desc":"\nFired when an error is received.\n\n","jsdoc":{"tags":[{"tag":"event","type":null,"description":"error"}]},"private":true,"configuration":true}],"behaviors":[],"observers":[{"javascriptNode":{"type":"BinaryExpression","operator":"+","left":{"type":"Literal","value":"_requestOptionsChanged(url, method, params.*, headers,","raw":"'_requestOptionsChanged(url, method, params.*, headers,'","range":[5916,5972],"loc":{"start":{"line":255,"column":6},"end":{"line":255,"column":62}}},"right":{"type":"Literal","value":"contentType, body, sync, handleAs, withCredentials, timeout, auto)","raw":"'contentType, body, sync, handleAs, withCredentials, timeout, auto)'","range":[5983,6051],"loc":{"start":{"line":256,"column":8},"end":{"line":256,"column":76}}},"range":[5916,6051],"loc":{"start":{"line":255,"column":6},"end":{"line":256,"column":76}}},"expression":"UNKNOWN"}],"is":"iron-ajax","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/iron-ajax/iron-ajax.html","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"hero","type":null,"name":"hero.svg","description":null}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},"iron-request":{"type":"element","desc":"\niron-request can be used to perform XMLHttpRequests.\n\n    <iron-request id=\"xhr\"></iron-request>\n    ...\n    this.$.xhr.send({url: url, params: params});\n","events":[],"properties":[{"name":"abort","type":"Function","desc":"\nAborts the request.\n     ","params":[],"function":true},{"name":"aborted","type":"Boolean","desc":"\nAborted will be true if an abort of the request is attempted.\n       ","published":true,"notify":true,"readOnly":true,"default":false},{"name":"completes","type":"Promise","desc":"\nA promise that resolves when the `xhr` response comes back, or rejects\nif there is an error before the `xhr` completes.\n\n","published":true,"readOnly":true,"notify":true,"default":"UNKNOWN"},{"name":"errored","type":"Boolean","desc":"\nErrored will be true if the browser fired an error event from the\nXHR object (mainly network errors).\n       ","published":true,"notify":true,"readOnly":true,"default":false},{"name":"parseResponse","type":"Function","desc":"\nAttempts to parse the response body of the XHR. If parsing succeeds,\nthe value returned will be deserialized based on the `responseType`\nset on the XHR.\n\n","params":[],"function":true,"return":{"type":"*","desc":"The parsed response,\nor undefined if there was an empty response or parsing failed."}},{"name":"progress","type":"Object","desc":"\nAn object that contains progress information emitted by the XHR if\navailable.\n\n","published":true,"notify":true,"readOnly":true,"default":"{}","jsdoc":{"tags":[{"tag":"default","type":null,"description":"{}"}]}},{"name":"response","type":"*","desc":"\nA reference to the parsed response body, if the `xhr` has completely\nresolved.\n\n","published":true,"notify":true,"readOnly":true,"default":"null","jsdoc":{"tags":[{"tag":"default","type":null,"description":"null"}]}},{"name":"send","type":"Function","desc":"\nSends an HTTP request to the server and returns the XHR object.\n\n","params":[{"name":"options","type":"{url: string, method: (string|undefined), async: (boolean|undefined), body: (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object), headers: (Object|undefined), handleAs: (string|undefined), withCredentials: (boolean|undefined)}","desc":"    url The url to which the request is sent.\n    method The HTTP method to use, default is GET.\n    async By default, all requests are sent asynchronously. To send synchronous requests,\n        set to true.\n    body The content for the request body for POST method.\n    headers HTTP request headers.\n    handleAs The response type. Default is 'text'.\n    withCredentials Whether or not to send credentials on the request. Default is false.\n  timeout: (Number|undefined)"}],"function":true,"return":{"type":"Promise","desc":null}},{"name":"status","type":"Number","desc":"\nA reference to the status code, if the `xhr` has completely resolved.\n       ","published":true,"notify":true,"readOnly":true,"default":0},{"name":"statusText","type":"String","desc":"\nA reference to the status text, if the `xhr` has completely resolved.\n       ","published":true,"notify":true,"readOnly":true,"default":""},{"name":"succeeded","type":"Function","desc":"\nSucceeded is true if the request succeeded. The request succeeded if it\nloaded without error, wasn't aborted, and the status code is â‰¥ 200, and\n< 300, or if the status code is 0.\n\nThe status code 0 is accepted as a success because some schemes - e.g.\nfile:// - don't provide status codes.\n\n","params":[],"function":true,"return":{"type":"boolean","desc":null}},{"name":"timedOut","type":"Boolean","desc":"\nTimedOut will be true if the XHR threw a timeout event.\n       ","published":true,"notify":true,"readOnly":true,"default":false},{"name":"xhr","type":"XMLHttpRequest","desc":"\nA reference to the XMLHttpRequest instance used to generate the\nnetwork request.\n\n","published":true,"notify":true,"readOnly":true,"default":"UNKNOWN"},{"name":"_encodeBodyObject","type":"Function","desc":"\n","params":[{"name":"body","type":"*","desc":"The given body of the request to try and encode."},{"name":"contentType","type":"?string","desc":"The given content type, to infer an encoding\n    from."}],"private":true,"function":true,"return":{"type":"*","desc":"Either the encoded body as a string, if successful,\n    or the unaltered body object if no encoding could be inferred."}},{"name":"_updateStatus","type":"Function","desc":"\nUpdates the status code and status text.\n     ","params":[],"private":true,"function":true},{"name":"_wwwFormUrlEncode","type":"Function","desc":"\n","params":[{"name":"object","type":"Object","desc":"The object to encode as x-www-form-urlencoded."}],"private":true,"function":true,"return":{"type":"string","desc":"."}},{"name":"_wwwFormUrlEncodePiece","type":"Function","desc":"\n","params":[{"name":"str","type":"*","desc":"A key or value to encode as x-www-form-urlencoded."}],"private":true,"function":true,"return":{"type":"string","desc":"."}},{"name":"hostAttributes","type":"Object","private":true,"configuration":true}],"behaviors":[],"observers":[],"is":"iron-request","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/iron-ajax/iron-request.html","demos":[]}}}