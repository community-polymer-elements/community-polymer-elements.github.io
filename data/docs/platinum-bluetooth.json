{"elements":[{"type":"element","desc":"\nThe `<platinum-bluetooth-device>` element allows you to [discover nearby\nbluetooth devices][1] thanks to the young [Web Bluetooth API][2]. It is\ncurrently only partially implemented in Chrome OS 45 behind the\nexperimental flag `chrome://flags/#enable-web-bluetooth`.\n\n`<platinum-bluetooth-device>` is used as a parent element for\n`<platinum-bluetooth-characteristic>` child elements.\n\nFor instance, here's how to request a nearby bluetooth device advertising\nBattery service :\n\n```html\n<platinum-bluetooth-device\n    services-filter='[\"battery_service\"]'>\n</platinum-bluetooth-device>\n```\n```js\nbutton.addEventListener('click', function() {\n  document.querySelector('platinum-bluetooth-device').request()\n  .then(function(device) { console.log(device.name); })\n  .catch(function(error) { console.error(error); });\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n","events":[],"properties":[{"name":"request","type":"Function","desc":"\nRequest a nearby bluetooth device and returns a Promise that will\nresolve when user picked one Bluetooth device.\n\nIt must be called on user gesture.\n\n","params":[],"function":true,"return":{"type":"Promise.<BluetoothDevice>","desc":null}},{"name":"reset","type":"Function","desc":"\nReset device to pick a new device.\n       ","params":[],"function":true},{"name":"servicesFilter","type":"Array","desc":"\nRequired Bluetooth GATT services filter. You may provide either the\nfull Bluetooth UUID as a string or a short 16- or 32-bit form as\nintegers like 0x180d.\n         ","published":true,"observer":"_servicesFilterChanged","observerNode":{"type":"Literal","value":"_servicesFilterChanged","raw":"'_servicesFilterChanged'","range":[2069,2093],"loc":{"start":{"line":68,"column":20},"end":{"line":68,"column":44}}}},{"name":"supported","type":"Boolean","desc":"\nIndicates whether the Web Bluetooth API is supported by\nthis browser.\n         ","published":true,"readOnly":true,"default":"SUPPORTED"},{"name":"_device","type":"BluetoothDevice","desc":"\nInternal variable used to cache Bluetooth device.\n         ","published":true,"observer":"_deviceChanged","observerNode":{"type":"Literal","value":"_deviceChanged","raw":"'_deviceChanged'","range":[2263,2279],"loc":{"start":{"line":76,"column":20},"end":{"line":76,"column":36}}},"private":true},{"name":"_deviceChanged","type":"Function","desc":"\nUpdate all characteristics when device changes.\n       ","params":[],"private":true,"function":true},{"name":"_servicesFilterChanged","type":"Function","desc":"\nReset device when services-filter property is changed.\n       ","params":[],"private":true,"function":true},{"name":"_updateCharacteristics","type":"Function","desc":"\nSet the internal device object on each characteristic child.\n       ","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"platinum-bluetooth-device","contentHref":"/var/www/POLYMER/1/2/polymer-element-catalog/bower_components/platinum-bluetooth/platinum-bluetooth-device.html","jsdoc":{"tags":[{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},{"type":"element","desc":"\nThe `<platinum-bluetooth-characteristic>` element allows you to [read\nand write characteristics on nearby bluetooth devices][1] thanks to the\nyoung [Web Bluetooth API][2]. It is currently only partially implemented\nin Chrome OS 45 behind the experimental flag\n`chrome://flags/#enable-web-bluetooth`.\n\n`<platinum-bluetooth-characteristic>` needs to be a child of a\n`<platinum-bluetooth-device>` element.\n\nFor instance, here's how to read battery level from a nearby bluetooth\ndevice advertising Battery service:\n\n```html\n<platinum-bluetooth-device services-filter='[\"battery_service\"]'>\n  <platinum-bluetooth-characteristic\n      service='battery_service'\n      characteristic='battery_level'>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar batteryLevel = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return batteryLevel.read().then(function(value) {\n      var data = new DataView(value);\n      console.log('Battery Level is ' + data.getUint8(0) + '%');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\nHere's another example on how to reset energy expended on nearby\nbluetooth device advertising Heart Rate service:\n\n```html\n<platinum-bluetooth-device services-filter='[\"heart_rate\"]'>\n  <platinum-bluetooth-characteristic\n      service='heart_rate'\n      characteristic='heart_rate_control_point'>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRateCtrlPoint = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    // Writing 1 is the signal to reset energy expended.\n    var resetEnergyExpended = new Uint8Array([1]);\n    return heartRateCtrlPoint.write(resetEnergyExpended).then(function() {\n      console.log('Energy expended has been reset');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\nIt is also possible for `<platinum-bluetooth-characteristic>` to fill in\na data-bound field in response to a read.\n\n```html\n<platinum-bluetooth-device services-filter='[\"heart_rate\"]'>\n  <platinum-bluetooth-characteristic\n      service='heart_rate'\n      characteristic='body_sensor_location'\n      value={{bodySensorLocation}}>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n...\n<span>{{bodySensorLocation}}</span>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar bodySensorLocation = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return bodySensorLocation.read()\n  })\n  .catch(function(error) { });\n});\n```\n\nYou can also use changes in `value` to drive characteristic writes when\n`auto-write` property is set to true.\n\n```html\n<platinum-bluetooth-device services-filter='[\"heart_rate\"]'>\n  <platinum-bluetooth-characteristic\n      service='heart_rate'\n      characteristic='heart_rate_control_point'\n      auto-write>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRateCtrlPoint = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    // Writing 1 is the signal to reset energy expended.\n    heartRateCtrlPoint.value = new Uint8Array([1]);\n  })\n  .catch(function(error) { });\n});\n\nheartRateCtrlPoint.addEventListener('platinum-bluetooth-auto-write-error',\n    function(event) {\n  // Handle error...\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n","events":[{"desc":"\nFired when an error occurs while writing automatically to a characteristic.\n\n","jsdoc":{"description":"\nFired when an error occurs while writing automatically to a characteristic.\n\n","tags":[{"tag":"event","type":null,"description":"platinum-bluetooth-auto-write-error"},{"tag":"param","type":"String","name":"The","description":"error message"}],"orig":"*\n       * Fired when an error occurs while writing automatically to a characteristic.\n       *\n       * @event platinum-bluetooth-auto-write-error\n       * @param {String} The error message\n       "},"name":"platinum-bluetooth-auto-write-error","params":[{"type":"String","desc":"error message","name":"The"}]}],"properties":[{"name":"autoWrite","type":"Boolean","desc":"\nIf true, automatically perform a write `value` on the characteristic\nwhen `value` changes.\n         ","published":true,"reflectToAttribute":"UNKNOWN","default":false},{"name":"characteristic","type":"String","desc":"\nRequired Bluetooth GATT characteristic for read and write operations.\nYou may provide either the full Bluetooth UUID as a string or a\nshort 16- or 32-bit form as integers like 0x2A19.\n         ","published":true,"observer":"_characteristicChanged","observerNode":{"type":"Literal","value":"_characteristicChanged","raw":"'_characteristicChanged'","range":[6489,6513],"loc":{"start":{"line":178,"column":20},"end":{"line":178,"column":44}}}},{"name":"read","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis read.\n\n","params":[],"function":true,"return":{"type":"Promise.<ArrayBuffer>","desc":"The value of this Bluetooth GATT Characteristic."}},{"name":"service","type":"String","desc":"\nRequired Bluetooth GATT primary service. You may provide either the\nfull Bluetooth UUID as a string or a short 16- or 32-bit form as\nintegers like 0x180d.\n         ","published":true,"observer":"_serviceChanged","observerNode":{"type":"Literal","value":"_serviceChanged","raw":"'_serviceChanged'","range":[6148,6165],"loc":{"start":{"line":168,"column":20},"end":{"line":168,"column":37}}}},{"name":"value","type":"ArrayBuffer","desc":"\nValue gets populated with the characteristic value when it's read.\n         ","published":true,"observer":"_valueChanged","observerNode":{"type":"Literal","value":"_valueChanged","raw":"'_valueChanged'","range":[6695,6710],"loc":{"start":{"line":186,"column":20},"end":{"line":186,"column":35}}},"notify":true},{"name":"write","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis written.\n\n","params":[{"name":"value","type":"(ArrayBufferView|ArrayBuffer)","desc":"The value to write."}],"function":true,"return":{"type":"Promise","desc":null}},{"name":"_characteristic","type":"BluetoothGATTCharacteristic","desc":"\nInternal variable used to cache Bluetooth GATT characteristic.\n         ","published":true,"readOnly":true,"private":true},{"name":"_characteristicChanged","type":"Function","desc":"\nReset internal cache when characteristic property is changed.\n       ","params":[],"private":true,"function":true},{"name":"_connectToDevice","type":"Function","desc":"\nReturns a promise that will resolve when bluetooth device picked by\nuser is connected.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<BluetoothGATTRemoteServer>","desc":null}},{"name":"_device","type":"BluetoothDevice","desc":"\nInternal variable used that represents the Bluetooth device.\n         ","published":true,"private":true},{"name":"_getCharacteristic","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis discovered.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<BluetoothGATTCharacteristic>","desc":null}},{"name":"_getPrimaryService","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Primary\nService is discovered.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<BluetoothGATTService>","desc":null}},{"name":"_readCharacteristic","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis read.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<ArrayBuffer>","desc":null}},{"name":"_server","type":"BluetoothGATTRemoteServer","desc":"\nInternal variable used to cache Bluetooth GATT remote server.\n         ","published":true,"readOnly":true,"private":true},{"name":"_service","type":"BluetoothGATTService","desc":"\nInternal variable used to cache Bluetooth GATT primary service.\n         ","published":true,"readOnly":true,"private":true},{"name":"_serviceChanged","type":"Function","desc":"\nReset internal cache when service property is changed.\n       ","params":[],"private":true,"function":true},{"name":"_valueChanged","type":"Function","desc":"\nAutomatically write value when auto-write property is true and value\nchanged.\n       ","params":[],"private":true,"function":true},{"name":"_writeCharacteristic","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis written.\n\n","params":[{"name":"value","desc":"{BufferSource (ArrayBufferView|ArrayBuffer)}"}],"private":true,"function":true,"return":{"type":"Promise.<void>","desc":null}}],"behaviors":[],"observers":[],"is":"platinum-bluetooth-characteristic","contentHref":"/var/www/POLYMER/1/2/polymer-element-catalog/bower_components/platinum-bluetooth/platinum-bluetooth-characteristic.html","jsdoc":{"tags":[{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/","description":""}]},"demos":[{"desc":"demo","path":"demo/"}],"hero":"hero.svg"}],"behaviors":[],"features":[],"elementsByTagName":{"platinum-bluetooth-device":{"type":"element","desc":"\nThe `<platinum-bluetooth-device>` element allows you to [discover nearby\nbluetooth devices][1] thanks to the young [Web Bluetooth API][2]. It is\ncurrently only partially implemented in Chrome OS 45 behind the\nexperimental flag `chrome://flags/#enable-web-bluetooth`.\n\n`<platinum-bluetooth-device>` is used as a parent element for\n`<platinum-bluetooth-characteristic>` child elements.\n\nFor instance, here's how to request a nearby bluetooth device advertising\nBattery service :\n\n```html\n<platinum-bluetooth-device\n    services-filter='[\"battery_service\"]'>\n</platinum-bluetooth-device>\n```\n```js\nbutton.addEventListener('click', function() {\n  document.querySelector('platinum-bluetooth-device').request()\n  .then(function(device) { console.log(device.name); })\n  .catch(function(error) { console.error(error); });\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n","events":[],"properties":[{"name":"request","type":"Function","desc":"\nRequest a nearby bluetooth device and returns a Promise that will\nresolve when user picked one Bluetooth device.\n\nIt must be called on user gesture.\n\n","params":[],"function":true,"return":{"type":"Promise.<BluetoothDevice>","desc":null}},{"name":"reset","type":"Function","desc":"\nReset device to pick a new device.\n       ","params":[],"function":true},{"name":"servicesFilter","type":"Array","desc":"\nRequired Bluetooth GATT services filter. You may provide either the\nfull Bluetooth UUID as a string or a short 16- or 32-bit form as\nintegers like 0x180d.\n         ","published":true,"observer":"_servicesFilterChanged","observerNode":{"type":"Literal","value":"_servicesFilterChanged","raw":"'_servicesFilterChanged'","range":[2069,2093],"loc":{"start":{"line":68,"column":20},"end":{"line":68,"column":44}}}},{"name":"supported","type":"Boolean","desc":"\nIndicates whether the Web Bluetooth API is supported by\nthis browser.\n         ","published":true,"readOnly":true,"default":"SUPPORTED"},{"name":"_device","type":"BluetoothDevice","desc":"\nInternal variable used to cache Bluetooth device.\n         ","published":true,"observer":"_deviceChanged","observerNode":{"type":"Literal","value":"_deviceChanged","raw":"'_deviceChanged'","range":[2263,2279],"loc":{"start":{"line":76,"column":20},"end":{"line":76,"column":36}}},"private":true},{"name":"_deviceChanged","type":"Function","desc":"\nUpdate all characteristics when device changes.\n       ","params":[],"private":true,"function":true},{"name":"_servicesFilterChanged","type":"Function","desc":"\nReset device when services-filter property is changed.\n       ","params":[],"private":true,"function":true},{"name":"_updateCharacteristics","type":"Function","desc":"\nSet the internal device object on each characteristic child.\n       ","params":[],"private":true,"function":true},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":[],"observers":[],"is":"platinum-bluetooth-device","contentHref":"/var/www/POLYMER/1/2/polymer-element-catalog/bower_components/platinum-bluetooth/platinum-bluetooth-device.html","jsdoc":{"tags":[{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},"platinum-bluetooth-characteristic":{"type":"element","desc":"\nThe `<platinum-bluetooth-characteristic>` element allows you to [read\nand write characteristics on nearby bluetooth devices][1] thanks to the\nyoung [Web Bluetooth API][2]. It is currently only partially implemented\nin Chrome OS 45 behind the experimental flag\n`chrome://flags/#enable-web-bluetooth`.\n\n`<platinum-bluetooth-characteristic>` needs to be a child of a\n`<platinum-bluetooth-device>` element.\n\nFor instance, here's how to read battery level from a nearby bluetooth\ndevice advertising Battery service:\n\n```html\n<platinum-bluetooth-device services-filter='[\"battery_service\"]'>\n  <platinum-bluetooth-characteristic\n      service='battery_service'\n      characteristic='battery_level'>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar batteryLevel = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return batteryLevel.read().then(function(value) {\n      var data = new DataView(value);\n      console.log('Battery Level is ' + data.getUint8(0) + '%');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\nHere's another example on how to reset energy expended on nearby\nbluetooth device advertising Heart Rate service:\n\n```html\n<platinum-bluetooth-device services-filter='[\"heart_rate\"]'>\n  <platinum-bluetooth-characteristic\n      service='heart_rate'\n      characteristic='heart_rate_control_point'>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRateCtrlPoint = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    // Writing 1 is the signal to reset energy expended.\n    var resetEnergyExpended = new Uint8Array([1]);\n    return heartRateCtrlPoint.write(resetEnergyExpended).then(function() {\n      console.log('Energy expended has been reset');\n    });\n  })\n  .catch(function(error) { });\n});\n```\n\nIt is also possible for `<platinum-bluetooth-characteristic>` to fill in\na data-bound field in response to a read.\n\n```html\n<platinum-bluetooth-device services-filter='[\"heart_rate\"]'>\n  <platinum-bluetooth-characteristic\n      service='heart_rate'\n      characteristic='body_sensor_location'\n      value={{bodySensorLocation}}>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n...\n<span>{{bodySensorLocation}}</span>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar bodySensorLocation = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    return bodySensorLocation.read()\n  })\n  .catch(function(error) { });\n});\n```\n\nYou can also use changes in `value` to drive characteristic writes when\n`auto-write` property is set to true.\n\n```html\n<platinum-bluetooth-device services-filter='[\"heart_rate\"]'>\n  <platinum-bluetooth-characteristic\n      service='heart_rate'\n      characteristic='heart_rate_control_point'\n      auto-write>\n  </platinum-bluetooth-characteristic>\n</platinum-bluetooth-device>\n```\n```js\nvar bluetoothDevice = document.querySelector('platinum-bluetooth-device');\nvar heartRateCtrlPoint = document.querySelector('platinum-bluetooth-characteristic');\n\nbutton.addEventListener('click', function() {\n  bluetoothDevice.request().then(function() {\n    // Writing 1 is the signal to reset energy expended.\n    heartRateCtrlPoint.value = new Uint8Array([1]);\n  })\n  .catch(function(error) { });\n});\n\nheartRateCtrlPoint.addEventListener('platinum-bluetooth-auto-write-error',\n    function(event) {\n  // Handle error...\n});\n```\n\n[1]: https://developers.google.com/web/updates/2015/07/interact-with-ble-devices-on-the-web\n[2]: https://github.com/WebBluetoothCG/web-bluetooth\n\n","events":[{"desc":"\nFired when an error occurs while writing automatically to a characteristic.\n\n","jsdoc":{"description":"\nFired when an error occurs while writing automatically to a characteristic.\n\n","tags":[{"tag":"event","type":null,"description":"platinum-bluetooth-auto-write-error"},{"tag":"param","type":"String","name":"The","description":"error message"}],"orig":"*\n       * Fired when an error occurs while writing automatically to a characteristic.\n       *\n       * @event platinum-bluetooth-auto-write-error\n       * @param {String} The error message\n       "},"name":"platinum-bluetooth-auto-write-error","params":[{"type":"String","desc":"error message","name":"The"}]}],"properties":[{"name":"autoWrite","type":"Boolean","desc":"\nIf true, automatically perform a write `value` on the characteristic\nwhen `value` changes.\n         ","published":true,"reflectToAttribute":"UNKNOWN","default":false},{"name":"characteristic","type":"String","desc":"\nRequired Bluetooth GATT characteristic for read and write operations.\nYou may provide either the full Bluetooth UUID as a string or a\nshort 16- or 32-bit form as integers like 0x2A19.\n         ","published":true,"observer":"_characteristicChanged","observerNode":{"type":"Literal","value":"_characteristicChanged","raw":"'_characteristicChanged'","range":[6489,6513],"loc":{"start":{"line":178,"column":20},"end":{"line":178,"column":44}}}},{"name":"read","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis read.\n\n","params":[],"function":true,"return":{"type":"Promise.<ArrayBuffer>","desc":"The value of this Bluetooth GATT Characteristic."}},{"name":"service","type":"String","desc":"\nRequired Bluetooth GATT primary service. You may provide either the\nfull Bluetooth UUID as a string or a short 16- or 32-bit form as\nintegers like 0x180d.\n         ","published":true,"observer":"_serviceChanged","observerNode":{"type":"Literal","value":"_serviceChanged","raw":"'_serviceChanged'","range":[6148,6165],"loc":{"start":{"line":168,"column":20},"end":{"line":168,"column":37}}}},{"name":"value","type":"ArrayBuffer","desc":"\nValue gets populated with the characteristic value when it's read.\n         ","published":true,"observer":"_valueChanged","observerNode":{"type":"Literal","value":"_valueChanged","raw":"'_valueChanged'","range":[6695,6710],"loc":{"start":{"line":186,"column":20},"end":{"line":186,"column":35}}},"notify":true},{"name":"write","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis written.\n\n","params":[{"name":"value","type":"(ArrayBufferView|ArrayBuffer)","desc":"The value to write."}],"function":true,"return":{"type":"Promise","desc":null}},{"name":"_characteristic","type":"BluetoothGATTCharacteristic","desc":"\nInternal variable used to cache Bluetooth GATT characteristic.\n         ","published":true,"readOnly":true,"private":true},{"name":"_characteristicChanged","type":"Function","desc":"\nReset internal cache when characteristic property is changed.\n       ","params":[],"private":true,"function":true},{"name":"_connectToDevice","type":"Function","desc":"\nReturns a promise that will resolve when bluetooth device picked by\nuser is connected.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<BluetoothGATTRemoteServer>","desc":null}},{"name":"_device","type":"BluetoothDevice","desc":"\nInternal variable used that represents the Bluetooth device.\n         ","published":true,"private":true},{"name":"_getCharacteristic","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis discovered.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<BluetoothGATTCharacteristic>","desc":null}},{"name":"_getPrimaryService","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Primary\nService is discovered.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<BluetoothGATTService>","desc":null}},{"name":"_readCharacteristic","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis read.\n\n","params":[],"private":true,"function":true,"return":{"type":"Promise.<ArrayBuffer>","desc":null}},{"name":"_server","type":"BluetoothGATTRemoteServer","desc":"\nInternal variable used to cache Bluetooth GATT remote server.\n         ","published":true,"readOnly":true,"private":true},{"name":"_service","type":"BluetoothGATTService","desc":"\nInternal variable used to cache Bluetooth GATT primary service.\n         ","published":true,"readOnly":true,"private":true},{"name":"_serviceChanged","type":"Function","desc":"\nReset internal cache when service property is changed.\n       ","params":[],"private":true,"function":true},{"name":"_valueChanged","type":"Function","desc":"\nAutomatically write value when auto-write property is true and value\nchanged.\n       ","params":[],"private":true,"function":true},{"name":"_writeCharacteristic","type":"Function","desc":"\nReturns a promise that will resolve when Bluetooth GATT Characteristic\nis written.\n\n","params":[{"name":"value","desc":"{BufferSource (ArrayBufferView|ArrayBuffer)}"}],"private":true,"function":true,"return":{"type":"Promise.<void>","desc":null}}],"behaviors":[],"observers":[],"is":"platinum-bluetooth-characteristic","contentHref":"/var/www/POLYMER/1/2/polymer-element-catalog/bower_components/platinum-bluetooth/platinum-bluetooth-characteristic.html","jsdoc":{"tags":[{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/","description":""}]},"demos":[{"desc":"demo","path":"demo/"}],"hero":"hero.svg"}}}