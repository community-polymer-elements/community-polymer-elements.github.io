{"elements":[{"type":"element","desc":"\nMaterial design: [Checkbox](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-checkbox)\n\n`paper-checkbox` is a button that can be either checked or unchecked.  User\ncan tap the checkbox to check or uncheck it.  Usually you use checkboxes\nto allow user to select multiple options from a set.  If you have a single\nON/OFF option, avoid using a single checkbox and use `paper-toggle-button`\ninstead.\n\nExample:\n\n    <paper-checkbox>label</paper-checkbox>\n\n    <paper-checkbox checked> label</paper-checkbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-checkbox-unchecked-background-color` | Checkbox background color when the input is not checked | `transparent`\n`--paper-checkbox-unchecked-color` | Checkbox border color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-checked-color` | Checkbox color when the input is checked | `--default-primary-color`\n`--paper-checkbox-checked-ink-color` | Selected/focus ripple color when the input is checked | `--default-primary-color`\n`--paper-checkbox-checkmark-color` | Checkmark color | `white`\n`--paper-checkbox-label-color` | Label color | `--primary-text-color`\n`--paper-checkbox-error-color` | Checkbox color when invalid | `--google-red-500`\n\n","events":[{"desc":"\nFired when the checked state changes due to user interaction.\n\n","jsdoc":{"description":"\nFired when the checked state changes due to user interaction.\n\n","tags":[{"tag":"event","type":null,"description":"change"}],"orig":"*\n         * Fired when the checked state changes due to user interaction.\n         *\n         * @event change\n         "},"name":"change","params":[]},{"desc":"\nFired when the checked state changes.\n\n","jsdoc":{"description":"\nFired when the checked state changes.\n\n","tags":[{"tag":"event","type":null,"description":"iron-change"}],"orig":"*\n         * Fired when the checked state changes.\n         *\n         * @event iron-change\n         "},"name":"iron-change","params":[]}],"properties":[{"__fromBehavior":"Polymer.IronButtonState","name":"active","type":"Boolean","desc":"\nIf true, the button is a toggle and is currently in the active state.\n       ","published":true,"default":false,"notify":true,"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"addOwnKeyBinding","type":"Function","desc":"\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       ","params":[{"name":"eventString"},{"name":"handlerName"}],"function":true},{"name":"ariaActiveAttribute","type":"String","desc":"\nFired when the checked state changes.\n\n","published":true,"default":"aria-checked","jsdoc":{"tags":[{"tag":"event","type":null,"description":"iron-change"}]}},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"checked","type":"Boolean","desc":"\nGets or sets the state, `true` is checked and `false` is unchecked.\n       ","published":true,"default":false,"reflectToAttribute":"UNKNOWN","notify":true,"observer":"_checkedChanged","observerNode":{"type":"Literal","value":"_checkedChanged","raw":"'_checkedChanged'","range":[799,816],"loc":{"start":{"line":29,"column":18},"end":{"line":29,"column":35}}}},{"__fromBehavior":"Polymer.IronControlState","name":"disabled","type":"Boolean","desc":"\nIf true, the user cannot interact with this element.\n       ","published":true,"default":false,"notify":true,"observer":"_disabledChanged","observerNode":{"type":"Literal","value":"_disabledChanged","raw":"'_disabledChanged'","range":[521,539],"loc":{"start":{"line":29,"column":18},"end":{"line":29,"column":36}}},"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"ensureRipple","type":"Function","desc":"\nEnsures this element contains a ripple effect. For startup efficiency \nthe ripple effect is dynamically on demand when needed.\n","params":[{"name":"triggeringEvent","type":"event","desc":"(optional) event that triggered the \nripple."}],"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"focused","type":"Boolean","desc":"\nIf true, the element currently has focus.\n       ","published":true,"default":false,"notify":true,"readOnly":true,"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"getRipple","type":"Function","desc":"\nReturns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the \nripple to be created.\n     ","params":[],"function":true},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"hasRipple","type":"Function","desc":"\nReturns true if this element currently contains a ripple effect.\n","params":[],"function":true,"return":{"type":"boolean","desc":null}},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"hasValidator","type":"Function","desc":"\n","params":[],"function":true,"return":{"type":"boolean","desc":"True if the validator `validator` exists."}},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"invalid","type":"Boolean","desc":"\nTrue if the last call to `validate` is invalid.\n       ","published":true,"notify":true,"reflectToAttribute":"UNKNOWN","default":false},{"__fromBehavior":"Polymer.IronButtonState","name":"keyBindings","type":"Object"},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"keyEventTarget","type":"Object","desc":"\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         ","published":true,"default":"UNKNOWN"},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"keyboardEventMatchesKeys","type":"Function","params":[{"name":"event"},{"name":"eventString"}],"function":true},{"__fromBehavior":"Polymer.IronFormElementBehavior","name":"name","type":"String","desc":"\nThe name of this element.\n       ","published":true},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"noink","type":"Boolean","desc":"\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       ","published":true,"observer":"_noinkChanged","observerNode":{"type":"Literal","value":"_noinkChanged","raw":"'_noinkChanged'","range":[581,596],"loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":33}}}},{"__fromBehavior":"Polymer.IronButtonState","name":"observers","type":"Array"},{"__fromBehavior":"Polymer.IronButtonState","name":"pointerDown","type":"Boolean","desc":"\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       ","published":true,"readOnly":true,"default":false},{"__fromBehavior":"Polymer.IronButtonState","name":"pressed","type":"Boolean","desc":"\nIf true, the user is currently holding down the button.\n       ","published":true,"readOnly":true,"default":false,"reflectToAttribute":"UNKNOWN","observer":"_pressedChanged","observerNode":{"type":"Literal","value":"_pressedChanged","raw":"'_pressedChanged'","range":[364,381],"loc":{"start":{"line":19,"column":18},"end":{"line":19,"column":35}}}},{"__fromBehavior":"Polymer.IronButtonState","name":"receivedFocusFromKeyboard","type":"Boolean","desc":"\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       ","published":true,"readOnly":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"removeOwnKeyBindings","type":"Function","desc":"\nWhen called, will remove all imperatively-added key bindings.\n       ","params":[],"function":true},{"__fromBehavior":"Polymer.IronFormElementBehavior","name":"required","type":"Boolean","desc":"\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recomended to provide a visual style for the element\nwhen it's value is invalid.\n       ","published":true,"default":false},{"__fromBehavior":"Polymer.IronButtonState","name":"toggles","type":"Boolean","desc":"\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       ","published":true,"default":false,"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"validate","type":"Function","desc":"\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n","params":[{"name":"value","type":"Object","desc":"The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."}],"function":true,"return":{"type":"boolean","desc":"True if `value` is valid."}},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"validator","type":"String","desc":"\nName of the validator to use.\n       ","published":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"validatorType","type":"String","desc":"\nNamespace for this validator.\n       ","published":true,"default":"validator"},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"value","type":"String","desc":" Overriden from Polymer.IronFormElementBehavior ","published":true,"default":""},{"__fromBehavior":"Polymer.IronButtonState","name":"_activeChanged","type":"Function","params":[{"name":"active"},{"name":"ariaActiveAttribute"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_addKeyBinding","type":"Function","params":[{"name":"eventString"},{"name":"handlerName"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_ariaActiveAttributeChanged","type":"Function","params":[{"name":"value"},{"name":"oldValue"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_asyncClick","type":"Function","desc":" event handler to unwind before triggering another event","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_boundFocusBlurHandler","type":"Function","published":true,"default":"UNKNOWN","private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_boundKeyHandlers","type":"Array","published":true,"default":"[]","private":true},{"__fromBehavior":"Polymer.PaperCheckedElementBehavior","name":"_buttonStateChanged","type":"Function","desc":"\nSynchronizes the element's `active` and `checked` state.\n     ","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_changedButtonState","type":"Function","desc":" provide hook for follow-on behaviors to react to button-state","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_changedControlState","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.PaperCheckedElementBehavior","name":"_checkedChanged","type":"Function","desc":"\nSynchronizes the element's checked state with its ripple effect.\n     ","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_collectKeyBindings","type":"Function","params":[],"private":true,"function":true},{"name":"_computeCheckboxClass","type":"Function","params":[{"name":"checked"},{"name":"invalid"}],"private":true,"function":true},{"name":"_computeCheckmarkClass","type":"Function","params":[{"name":"checked"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_controlStateChanged","type":"Function","params":[],"private":true,"function":true},{"name":"_createRipple","type":"Function","desc":" create ripple inside the checkboxContainer","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_detectKeyboardFocus","type":"Function","params":[{"name":"focused"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_disabledChanged","type":"Function","params":[{"name":"disabled"},{"name":"old"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_downHandler","type":"Function","params":[{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_focusBlurHandler","type":"Function","params":[{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.PaperInkyFocusBehaviorImpl","name":"_focusedChanged","type":"Function","params":[{"name":"receivedFocusFromKeyboard"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"_getValidity","type":"Function","desc":"\nReturns false if the element is required and not checked, and true otherwise.\n","params":[{"name":"_value"}],"private":true,"function":true,"return":{"type":"boolean","desc":"true if `required` is false, or if `required` and `checked` are both true."}},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_imperativeKeyBindings","type":"Object","desc":" own properties of everything on the \"prototype\".","published":true,"default":"{}","private":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"_invalidChanged","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_listenKeyEventListeners","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_mouseEventRe","type":"object","private":true},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"_noinkChanged","type":"Function","params":[{"name":"noink"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_oldTabIndex","type":"Number","published":true,"private":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_onKeyBindingEvent","type":"Function","params":[{"name":"keyBindings"},{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronFormElementBehavior","name":"_parentForm","type":"Object","desc":"\nThe form that the element is registered to.\n       ","published":true,"private":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_prepKeyBindings","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_pressedChanged","type":"Function","desc":" any of these changes are considered a change to button state","params":[{"name":"pressed"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"_requiredChanged","type":"Function","desc":"\nUpdate the aria-required label when `required` is changed.\n     ","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_resetKeyEventListeners","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_spaceKeyDownHandler","type":"Function","params":[{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_spaceKeyUpHandler","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_tapHandler","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_triggerKeyHandler","type":"Function","params":[{"name":"keyCombo"},{"name":"handlerName"},{"name":"keyboardEvent"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_unlistenKeyEventListeners","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_upHandler","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_userActivate","type":"Function","desc":" 'change' events","params":[{"name":"active"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"_validator","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"_validatorMeta","type":"Object","published":true,"private":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"hostAttributes","type":"Object","private":true,"configuration":true},{"__fromBehavior":"Polymer.IronButtonState","name":"listeners","type":"Object","private":true,"configuration":true},{"__fromBehavior":"Polymer.IronControlState","name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"registered","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Polymer.PaperCheckedElementBehavior"],"observers":[],"is":"paper-checkbox","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/paper-checkbox/paper-checkbox.html","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}]}],"behaviors":[],"features":[],"elementsByTagName":{"paper-checkbox":{"type":"element","desc":"\nMaterial design: [Checkbox](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-checkbox)\n\n`paper-checkbox` is a button that can be either checked or unchecked.  User\ncan tap the checkbox to check or uncheck it.  Usually you use checkboxes\nto allow user to select multiple options from a set.  If you have a single\nON/OFF option, avoid using a single checkbox and use `paper-toggle-button`\ninstead.\n\nExample:\n\n    <paper-checkbox>label</paper-checkbox>\n\n    <paper-checkbox checked> label</paper-checkbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-checkbox-unchecked-background-color` | Checkbox background color when the input is not checked | `transparent`\n`--paper-checkbox-unchecked-color` | Checkbox border color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`\n`--paper-checkbox-checked-color` | Checkbox color when the input is checked | `--default-primary-color`\n`--paper-checkbox-checked-ink-color` | Selected/focus ripple color when the input is checked | `--default-primary-color`\n`--paper-checkbox-checkmark-color` | Checkmark color | `white`\n`--paper-checkbox-label-color` | Label color | `--primary-text-color`\n`--paper-checkbox-error-color` | Checkbox color when invalid | `--google-red-500`\n\n","events":[{"desc":"\nFired when the checked state changes due to user interaction.\n\n","jsdoc":{"description":"\nFired when the checked state changes due to user interaction.\n\n","tags":[{"tag":"event","type":null,"description":"change"}],"orig":"*\n         * Fired when the checked state changes due to user interaction.\n         *\n         * @event change\n         "},"name":"change","params":[]},{"desc":"\nFired when the checked state changes.\n\n","jsdoc":{"description":"\nFired when the checked state changes.\n\n","tags":[{"tag":"event","type":null,"description":"iron-change"}],"orig":"*\n         * Fired when the checked state changes.\n         *\n         * @event iron-change\n         "},"name":"iron-change","params":[]}],"properties":[{"__fromBehavior":"Polymer.IronButtonState","name":"active","type":"Boolean","desc":"\nIf true, the button is a toggle and is currently in the active state.\n       ","published":true,"default":false,"notify":true,"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"addOwnKeyBinding","type":"Function","desc":"\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       ","params":[{"name":"eventString"},{"name":"handlerName"}],"function":true},{"name":"ariaActiveAttribute","type":"String","desc":"\nFired when the checked state changes.\n\n","published":true,"default":"aria-checked","jsdoc":{"tags":[{"tag":"event","type":null,"description":"iron-change"}]}},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"checked","type":"Boolean","desc":"\nGets or sets the state, `true` is checked and `false` is unchecked.\n       ","published":true,"default":false,"reflectToAttribute":"UNKNOWN","notify":true,"observer":"_checkedChanged","observerNode":{"type":"Literal","value":"_checkedChanged","raw":"'_checkedChanged'","range":[799,816],"loc":{"start":{"line":29,"column":18},"end":{"line":29,"column":35}}}},{"__fromBehavior":"Polymer.IronControlState","name":"disabled","type":"Boolean","desc":"\nIf true, the user cannot interact with this element.\n       ","published":true,"default":false,"notify":true,"observer":"_disabledChanged","observerNode":{"type":"Literal","value":"_disabledChanged","raw":"'_disabledChanged'","range":[521,539],"loc":{"start":{"line":29,"column":18},"end":{"line":29,"column":36}}},"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"ensureRipple","type":"Function","desc":"\nEnsures this element contains a ripple effect. For startup efficiency \nthe ripple effect is dynamically on demand when needed.\n","params":[{"name":"triggeringEvent","type":"event","desc":"(optional) event that triggered the \nripple."}],"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"focused","type":"Boolean","desc":"\nIf true, the element currently has focus.\n       ","published":true,"default":false,"notify":true,"readOnly":true,"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"getRipple","type":"Function","desc":"\nReturns the `<paper-ripple>` element used by this element to create\nripple effects. The element's ripple is created on demand, when\nnecessary, and calling this method will force the \nripple to be created.\n     ","params":[],"function":true},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"hasRipple","type":"Function","desc":"\nReturns true if this element currently contains a ripple effect.\n","params":[],"function":true,"return":{"type":"boolean","desc":null}},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"hasValidator","type":"Function","desc":"\n","params":[],"function":true,"return":{"type":"boolean","desc":"True if the validator `validator` exists."}},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"invalid","type":"Boolean","desc":"\nTrue if the last call to `validate` is invalid.\n       ","published":true,"notify":true,"reflectToAttribute":"UNKNOWN","default":false},{"__fromBehavior":"Polymer.IronButtonState","name":"keyBindings","type":"Object"},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"keyEventTarget","type":"Object","desc":"\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         ","published":true,"default":"UNKNOWN"},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"keyboardEventMatchesKeys","type":"Function","params":[{"name":"event"},{"name":"eventString"}],"function":true},{"__fromBehavior":"Polymer.IronFormElementBehavior","name":"name","type":"String","desc":"\nThe name of this element.\n       ","published":true},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"noink","type":"Boolean","desc":"\nIf true, the element will not produce a ripple effect when interacted\nwith via the pointer.\n       ","published":true,"observer":"_noinkChanged","observerNode":{"type":"Literal","value":"_noinkChanged","raw":"'_noinkChanged'","range":[581,596],"loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":33}}}},{"__fromBehavior":"Polymer.IronButtonState","name":"observers","type":"Array"},{"__fromBehavior":"Polymer.IronButtonState","name":"pointerDown","type":"Boolean","desc":"\nTrue if the element is currently being pressed by a \"pointer,\" which\nis loosely defined as mouse or touch input (but specifically excluding\nkeyboard input).\n       ","published":true,"readOnly":true,"default":false},{"__fromBehavior":"Polymer.IronButtonState","name":"pressed","type":"Boolean","desc":"\nIf true, the user is currently holding down the button.\n       ","published":true,"readOnly":true,"default":false,"reflectToAttribute":"UNKNOWN","observer":"_pressedChanged","observerNode":{"type":"Literal","value":"_pressedChanged","raw":"'_pressedChanged'","range":[364,381],"loc":{"start":{"line":19,"column":18},"end":{"line":19,"column":35}}}},{"__fromBehavior":"Polymer.IronButtonState","name":"receivedFocusFromKeyboard","type":"Boolean","desc":"\nTrue if the input device that caused the element to receive focus\nwas a keyboard.\n       ","published":true,"readOnly":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"removeOwnKeyBindings","type":"Function","desc":"\nWhen called, will remove all imperatively-added key bindings.\n       ","params":[],"function":true},{"__fromBehavior":"Polymer.IronFormElementBehavior","name":"required","type":"Boolean","desc":"\nSet to true to mark the input as required. If used in a form, a\ncustom element that uses this behavior should also use\nPolymer.IronValidatableBehavior and define a custom validation method.\nOtherwise, a `required` element will always be considered valid.\nIt's also strongly recomended to provide a visual style for the element\nwhen it's value is invalid.\n       ","published":true,"default":false},{"__fromBehavior":"Polymer.IronButtonState","name":"toggles","type":"Boolean","desc":"\nIf true, the button toggles the active state with each tap or press\nof the spacebar.\n       ","published":true,"default":false,"reflectToAttribute":"UNKNOWN"},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"validate","type":"Function","desc":"\nReturns true if the `value` is valid, and updates `invalid`. If you want\nyour element to have custom validation logic, do not override this method;\noverride `_getValidity(value)` instead.\n\n","params":[{"name":"value","type":"Object","desc":"The value to be validated. By default, it is passed\nto the validator's `validate()` function, if a validator is set."}],"function":true,"return":{"type":"boolean","desc":"True if `value` is valid."}},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"validator","type":"String","desc":"\nName of the validator to use.\n       ","published":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"validatorType","type":"String","desc":"\nNamespace for this validator.\n       ","published":true,"default":"validator"},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"value","type":"String","desc":" Overriden from Polymer.IronFormElementBehavior ","published":true,"default":""},{"__fromBehavior":"Polymer.IronButtonState","name":"_activeChanged","type":"Function","params":[{"name":"active"},{"name":"ariaActiveAttribute"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_addKeyBinding","type":"Function","params":[{"name":"eventString"},{"name":"handlerName"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_ariaActiveAttributeChanged","type":"Function","params":[{"name":"value"},{"name":"oldValue"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_asyncClick","type":"Function","desc":" event handler to unwind before triggering another event","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_boundFocusBlurHandler","type":"Function","published":true,"default":"UNKNOWN","private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_boundKeyHandlers","type":"Array","published":true,"default":"[]","private":true},{"__fromBehavior":"Polymer.PaperCheckedElementBehavior","name":"_buttonStateChanged","type":"Function","desc":"\nSynchronizes the element's `active` and `checked` state.\n     ","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_changedButtonState","type":"Function","desc":" provide hook for follow-on behaviors to react to button-state","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_changedControlState","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.PaperCheckedElementBehavior","name":"_checkedChanged","type":"Function","desc":"\nSynchronizes the element's checked state with its ripple effect.\n     ","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_collectKeyBindings","type":"Function","params":[],"private":true,"function":true},{"name":"_computeCheckboxClass","type":"Function","params":[{"name":"checked"},{"name":"invalid"}],"private":true,"function":true},{"name":"_computeCheckmarkClass","type":"Function","params":[{"name":"checked"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_controlStateChanged","type":"Function","params":[],"private":true,"function":true},{"name":"_createRipple","type":"Function","desc":" create ripple inside the checkboxContainer","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_detectKeyboardFocus","type":"Function","params":[{"name":"focused"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_disabledChanged","type":"Function","params":[{"name":"disabled"},{"name":"old"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_downHandler","type":"Function","params":[{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_focusBlurHandler","type":"Function","params":[{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.PaperInkyFocusBehaviorImpl","name":"_focusedChanged","type":"Function","params":[{"name":"receivedFocusFromKeyboard"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"_getValidity","type":"Function","desc":"\nReturns false if the element is required and not checked, and true otherwise.\n","params":[{"name":"_value"}],"private":true,"function":true,"return":{"type":"boolean","desc":"true if `required` is false, or if `required` and `checked` are both true."}},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_imperativeKeyBindings","type":"Object","desc":" own properties of everything on the \"prototype\".","published":true,"default":"{}","private":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"_invalidChanged","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_listenKeyEventListeners","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_mouseEventRe","type":"object","private":true},{"__fromBehavior":"Polymer.PaperRippleBehavior","name":"_noinkChanged","type":"Function","params":[{"name":"noink"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronControlState","name":"_oldTabIndex","type":"Number","published":true,"private":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_onKeyBindingEvent","type":"Function","params":[{"name":"keyBindings"},{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronFormElementBehavior","name":"_parentForm","type":"Object","desc":"\nThe form that the element is registered to.\n       ","published":true,"private":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_prepKeyBindings","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_pressedChanged","type":"Function","desc":" any of these changes are considered a change to button state","params":[{"name":"pressed"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronCheckedElementBehavior","name":"_requiredChanged","type":"Function","desc":"\nUpdate the aria-required label when `required` is changed.\n     ","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_resetKeyEventListeners","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_spaceKeyDownHandler","type":"Function","params":[{"name":"event"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_spaceKeyUpHandler","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_tapHandler","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_triggerKeyHandler","type":"Function","params":[{"name":"keyCombo"},{"name":"handlerName"},{"name":"keyboardEvent"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"_unlistenKeyEventListeners","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_upHandler","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronButtonState","name":"_userActivate","type":"Function","desc":" 'change' events","params":[{"name":"active"}],"private":true,"function":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"_validator","type":"Function","params":[],"private":true,"function":true},{"__fromBehavior":"Polymer.IronValidatableBehavior","name":"_validatorMeta","type":"Object","published":true,"private":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"name":"hostAttributes","type":"Object","private":true,"configuration":true},{"__fromBehavior":"Polymer.IronButtonState","name":"listeners","type":"Object","private":true,"configuration":true},{"__fromBehavior":"Polymer.IronControlState","name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true},{"__fromBehavior":"Polymer.IronA11yKeysBehavior","name":"registered","type":"Function","params":[],"private":true,"configuration":true,"function":true}],"behaviors":["Polymer.PaperCheckedElementBehavior"],"observers":[],"is":"paper-checkbox","contentHref":"/var/www/community-polymer-elements.github.io/private/polymer-element-catalog/bower_components/paper-checkbox/paper-checkbox.html","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}]}}}